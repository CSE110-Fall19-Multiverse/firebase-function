{"version":3,"file":"browser.js","sources":["../src/channel_state.js","../src/events.js","../src/utils.js","../src/channel.js","../src/client_state.js","../src/connection.js","../jsonwebtoken","../crypto","../src/signing.js","../http","../https","../src/client.js"],"sourcesContent":["import Immutable from 'seamless-immutable';\n\n/**\n * ChannelState - A container class for the channel state.\n */\n\nfunction byDate(a, b) {\n\treturn a.created_at - b.created_at;\n}\n\nexport class ChannelState {\n\tconstructor(channel) {\n\t\tthis._channel = channel;\n\t\tthis.watcher_count = 0;\n\t\tthis.typing = Immutable({});\n\t\tthis.read = Immutable({});\n\t\tthis.messages = Immutable([]);\n\t\tthis.threads = Immutable({});\n\t\t// a list of users to hide messages from\n\t\tthis.mutedUsers = Immutable([]);\n\t\tthis.watchers = Immutable({});\n\t\tthis.members = Immutable({});\n\t\tthis.last_message_at =\n\t\t\tchannel.last_message_at != null ? new Date(channel.last_message_at) : null;\n\t}\n\n\t/**\n\t * addMessageSorted - Add a message to the state\n\t *\n\t * @param {object} newMessage A new message\n\t *\n\t */\n\taddMessageSorted(newMessage) {\n\t\treturn this.addMessagesSorted([newMessage]);\n\t}\n\n\t/**\n\t * messageToImmutable - Takes the message object. Parses the dates, sets __html\n\t * and sets the status to received if missing. Returns an immutable message object\n\t *\n\t * @param {object} message an Immutable message object\n\t *\n\t */\n\tmessageToImmutable(message) {\n\t\tmessage.__html = message.html;\n\t\t// parse the date..\n\t\tmessage.created_at = new Date(message.created_at);\n\t\tmessage.updated_at = new Date(message.updated_at);\n\t\tif (!message.status) {\n\t\t\tmessage.status = 'received';\n\t\t}\n\t\treturn Immutable(message);\n\t}\n\n\t/**\n\t * addMessagesSorted - Add the list of messages to state and resorts the messages\n\t *\n\t * @param {array}   newMessages    A list of messages\n\t * @param {boolean} initializing   Weather channel is being initialized.\n\t *\n\t */\n\taddMessagesSorted(newMessages, initializing = false) {\n\t\t// parse all the new message dates and add __html for react\n\t\tconst parsedMessages = [];\n\t\tfor (const message of newMessages) {\n\t\t\tif (initializing && this.threads[message.id]) {\n\t\t\t\t// If we are initializing the state of channel (e.g., in case of connection recovery),\n\t\t\t\t// then in that case we remove thread related to this message from threads object.\n\t\t\t\t// This way we can ensure that we don't have any stale data in thread object\n\t\t\t\t// and consumer can refetch the replies.\n\t\t\t\tthis.threads = Immutable.without(this.threads, message.id);\n\t\t\t}\n\t\t\tconst parsedMsg = this.messageToImmutable(message);\n\t\t\tparsedMessages.push(parsedMsg);\n\t\t\tif (parsedMsg.created_at > this.last_message_at) {\n\t\t\t\tthis.last_message_at = parsedMsg.created_at;\n\t\t\t}\n\t\t}\n\n\t\t// update or append the messages...\n\t\tconst updatedThreads = [];\n\t\tfor (const message of parsedMessages) {\n\t\t\tconst isThreadReply = message.parent_id && !message.show_in_channel;\n\t\t\t// add to the main message list\n\t\t\tif (!isThreadReply) {\n\t\t\t\tthis.messages = this._addToMessageList(this.messages, message);\n\t\t\t}\n\t\t\t// add to the thread if applicable..\n\t\t\tconst parentID = message.parent_id;\n\t\t\tif (parentID) {\n\t\t\t\tconst thread = this.threads[parentID] || Immutable([]);\n\t\t\t\tconst threadMessages = this._addToMessageList(thread, message);\n\t\t\t\tthis.threads = this.threads.set(parentID, threadMessages);\n\t\t\t\tupdatedThreads.push(parentID);\n\t\t\t}\n\t\t}\n\n\t\t// Resort the main messages and the threads that changed...\n\t\tconst messages = [...this.messages];\n\t\tmessages.sort(byDate);\n\t\tthis.messages = Immutable(messages);\n\t\tfor (const parentID of updatedThreads) {\n\t\t\tconst threadMessages = this.threads[parentID]\n\t\t\t\t? [...this.threads[parentID]]\n\t\t\t\t: [];\n\t\t\tthreadMessages.sort(byDate);\n\t\t\tthis.threads = this.threads.set(parentID, threadMessages);\n\t\t}\n\t}\n\n\taddReaction(reaction, message) {\n\t\tconst { messages } = this;\n\t\tif (!message) return;\n\t\tconst { parent_id, show_in_channel } = message;\n\n\t\tif (parent_id && this.threads[parent_id]) {\n\t\t\tconst thread = this.threads[parent_id];\n\n\t\t\tfor (let i = 0; i < thread.length; i++) {\n\t\t\t\tlet message = thread[i];\n\t\t\t\tmessage = this._addReactionToMessage(message, reaction);\n\t\t\t\tif (!message) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthis.threads = this.threads.set(parent_id, thread.set(i, message));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\n\t\tif ((!show_in_channel && !parent_id) || show_in_channel) {\n\t\t\tfor (let i = 0; i < messages.length; i++) {\n\t\t\t\tlet message = messages[i];\n\t\t\t\tmessage = this._addReactionToMessage(message, reaction);\n\t\t\t\tif (!message) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tthis.messages = messages.set(i, message);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t_addReactionToMessage(message, reaction) {\n\t\tconst idMatch = message.id && message.id === reaction.message_id;\n\n\t\tif (!idMatch) {\n\t\t\treturn false;\n\t\t}\n\n\t\tmessage = this._removeReactionFromMessage(message, reaction);\n\t\tif (this._channel.getClient().userID === reaction.user.id) {\n\t\t\tmessage = message.update('own_reactions', (old = []) =>\n\t\t\t\told.concat([reaction]),\n\t\t\t);\n\t\t}\n\t\tmessage = message.update('latest_reactions', (old = []) =>\n\t\t\told.concat([reaction]),\n\t\t);\n\n\t\tmessage = message.updateIn(['reaction_counts', reaction.type], old =>\n\t\t\told ? old + 1 : 1,\n\t\t);\n\n\t\treturn message;\n\t}\n\n\t_removeReactionFromMessage(message, reaction) {\n\t\tconst filterReaction = old =>\n\t\t\told.filter(\n\t\t\t\titem => item.type !== reaction.type || item.user.id !== reaction.user.id,\n\t\t\t);\n\t\tmessage = message.update('own_reactions', filterReaction);\n\t\tmessage = message.update('latest_reactions', filterReaction);\n\t\treturn message;\n\t}\n\n\tremoveReaction(reaction, message) {\n\t\tconst { messages } = this;\n\t\tif (!message) return;\n\t\tconst { parent_id, show_in_channel } = message;\n\n\t\tif (parent_id && this.threads[parent_id]) {\n\t\t\tconst thread = this.threads[parent_id];\n\t\t\tfor (let i = 0; i < thread.length; i++) {\n\t\t\t\tlet message = thread[i];\n\t\t\t\tconst idMatch = message.id && message.id === reaction.message_id;\n\n\t\t\t\tif (!idMatch) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tmessage = this._removeReactionFromMessage(message, reaction);\n\t\t\t\tmessage = message.updateIn(['reaction_counts', reaction.type], old =>\n\t\t\t\t\told ? old - 1 : 0,\n\t\t\t\t);\n\n\t\t\t\tthis.threads = this.threads.set(parent_id, thread.set(i, message));\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif ((!show_in_channel && !parent_id) || show_in_channel) {\n\t\t\tfor (let i = 0; i < messages.length; i++) {\n\t\t\t\tlet message = messages[i];\n\t\t\t\tconst idMatch = message.id && message.id === reaction.message_id;\n\n\t\t\t\tif (!idMatch) {\n\t\t\t\t\tcontinue;\n\t\t\t\t}\n\t\t\t\tmessage = this._removeReactionFromMessage(message, reaction);\n\t\t\t\tmessage = message.updateIn(['reaction_counts', reaction.type], old =>\n\t\t\t\t\told ? old - 1 : 0,\n\t\t\t\t);\n\n\t\t\t\tthis.messages = messages.set(i, message);\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * _addToMessageList - Adds a message to a list of messages, tries to update first, appends if message isnt found\n\t *\n\t * @param {array} messages A list of messages\n\t * @param {object} newMessage The new message\n\t *\n\t */\n\t_addToMessageList(messages, newMessage) {\n\t\tlet updated = false;\n\n\t\tfor (let i = 0; i < messages.length; i++) {\n\t\t\tconst message = messages[i];\n\t\t\tconst idMatch = message.id && newMessage.id && message.id === newMessage.id;\n\n\t\t\tif (idMatch) {\n\t\t\t\tmessages = messages.set(i, newMessage);\n\t\t\t\tupdated = true;\n\t\t\t}\n\t\t}\n\n\t\tif (!updated) {\n\t\t\tmessages = messages.concat([newMessage]);\n\t\t}\n\n\t\treturn messages;\n\t}\n\n\t/**\n\t * removeMessage - Description\n\t *\n\t * @param {type} messageToRemove Object of the message to remove. Needs to have at id specified.\n\t *\n\t * @return {boolean} Returns if the message was removed\n\t */\n\tremoveMessage(messageToRemove) {\n\t\tlet removed = false;\n\t\tconst messages = this.messages.flatMap(message => {\n\t\t\tconst idMatch =\n\t\t\t\tmessage.id && messageToRemove.id && message.id === messageToRemove.id;\n\n\t\t\tif (idMatch) {\n\t\t\t\treturn [];\n\t\t\t} else {\n\t\t\t\tremoved = true;\n\t\t\t\treturn message;\n\t\t\t}\n\t\t});\n\n\t\tthis.messages = messages;\n\t\treturn removed;\n\t}\n\n\t/**\n\t * filterErrorMessages - Removes error messages from the channel state.\n\t *\n\t */\n\tfilterErrorMessages() {\n\t\tconst filteredMessages = this.messages.flatMap(message => {\n\t\t\tif (message.type !== 'error') {\n\t\t\t\treturn message;\n\t\t\t} else {\n\t\t\t\treturn [];\n\t\t\t}\n\t\t});\n\n\t\tthis.messages = Immutable(filteredMessages);\n\t}\n\n\t/**\n\t * clean - Remove stale data such as users that stayed in typing state for more than 5 seconds\n\t */\n\tclean() {\n\t\tconst now = new Date();\n\t\t// prevent old users from showing up as typing\n\t\tfor (const [userID, lastEvent] of Object.entries(this.typing)) {\n\t\t\tconst since = now - new Date(lastEvent.received_at);\n\t\t\tif (since > 7000) {\n\t\t\t\tthis.typing = this.typing.without(userID);\n\t\t\t\tthis._channel.getClient().dispatchEvent({\n\t\t\t\t\ttype: 'typing.stop',\n\t\t\t\t\tuser: { id: userID },\n\t\t\t\t\tcid: this._channel.cid,\n\t\t\t\t});\n\t\t\t}\n\t\t}\n\t}\n}\n","export const EVENT_MAP = {\n\t'user.presence.changed': true,\n\t'user.watching.start': true,\n\t'user.watching.stop': true,\n\t'user.updated': true,\n\t'typing.start': true,\n\t'typing.stop': true,\n\t'message.new': true,\n\t'message.updated': true,\n\t'message.deleted': true,\n\t'message.read': true,\n\t'reaction.new': true,\n\t'reaction.deleted': true,\n\t'member.added': true,\n\t'member.updated': true,\n\t'member.removed': true,\n\t'channel.updated': true,\n\t'channel.deleted': true,\n\t'channel.truncated': true,\n\t'health.check': true,\n\t'notification.message_new': true,\n\t'notification.mark_read': true,\n\t'notification.invited': true,\n\t'notification.invite_accepted': true,\n\t'notification.added_to_channel': true,\n\t'notification.removed_from_channel': true,\n\t'notification.mutes_updated': true,\n\t'notification.channel_deleted': true,\n\t'notification.channel_truncated': true,\n\t// local events\n\t'connection.changed': true,\n\t'connection.recovered': true,\n};\n\nexport function isValidEventType(eventType) {\n\tif (eventType === 'all') {\n\t\treturn true;\n\t}\n\treturn EVENT_MAP[eventType] || false;\n}\n","/**\n * logChatPromiseExecution - utility function for logging the execution of a promise..\n *  use this when you want to run the promise and handle errors by logging a warning\n *\n * @param {type} promise The promise you want to run and log\n * @param {type} name    A descriptive name of what the promise does for log output\n *\n */\n\nexport function logChatPromiseExecution(promise, name) {\n\tpromise\n\t\t.then(() => {\n\t\t\t// do nothing...\n\t\t})\n\t\t.catch(error => {\n\t\t\tconsole.warn(`failed to do ${name}, ran into error: `, error);\n\t\t});\n}\n\nexport const sleep = m => new Promise(r => setTimeout(r, m));\n","import Immutable from 'seamless-immutable';\nimport { ChannelState } from './channel_state';\nimport { isValidEventType } from './events';\nimport { logChatPromiseExecution } from './utils';\n\n/**\n * Channel - The Channel class manages it's own state.\n */\nexport class Channel {\n\t/**\n\t * constructor - Create a channel\n\t *\n\t * @param {Client} client the chat client\n\t * @param {string} type  the type of channel\n\t * @param {string} [id]  the id of the chat\n\t * @param {type} custom any additional custom params\n\t *\n\t * @return {Channel} Returns a new uninitialized channel\n\t */\n\tconstructor(client, type, id, data) {\n\t\tconst validTypeRe = /^[\\w_-]+$/;\n\t\tconst validIDRe = /^[\\w!_-]+$/;\n\n\t\tif (!validTypeRe.test(type)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Invalid chat type ${type}, letters, numbers and \"_-\" are allowed`,\n\t\t\t);\n\t\t}\n\t\tif (!validIDRe.test(id)) {\n\t\t\tthrow new Error(\n\t\t\t\t`Invalid chat id ${id}, letters, numbers and \"!-_\" are allowed`,\n\t\t\t);\n\t\t}\n\n\t\tthis._client = client;\n\t\tthis.type = type;\n\t\tthis.id = id;\n\t\t// used by the frontend, gets updated:\n\t\tthis.data = data;\n\t\t// this._data is used for the requests...\n\t\tthis._data = { ...data };\n\n\t\tthis.cid = `${type}:${id}`;\n\t\tthis.listeners = {};\n\t\t// perhaps the state variable should be private\n\t\tthis.state = new ChannelState(this);\n\t\tthis.initialized = false;\n\t\tthis.lastTypingEvent = null;\n\t\tthis.isTyping = false;\n\t\tthis.disconnected = false;\n\t}\n\n\t/**\n\t * getClient - Get the chat client for this channel. If client.disconnect() was called, this function will error\n\t *\n\t * @return {object}\n\t */\n\tgetClient() {\n\t\tif (this.disconnected === true) {\n\t\t\tthrow Error(`You can't use a channel after client.disconnect() was called`);\n\t\t}\n\t\treturn this._client;\n\t}\n\n\t/**\n\t * getConfig - Get the configs for this channel type\n\t *\n\t * @return {object}\n\t */\n\tgetConfig() {\n\t\tconst client = this.getClient();\n\t\treturn client.configs[this.type];\n\t}\n\n\t/**\n\t * sendMessage - Send a message to this channel\n\t *\n\t * @param {object} message The Message object\n\t *\n\t * @return {object} The Server Response\n\t */\n\n\tasync sendMessage(message) {\n\t\treturn await this.getClient().post(this._channelURL() + '/message', {\n\t\t\tmessage,\n\t\t});\n\t}\n\n\tsendFile(uri, name, contentType, user) {\n\t\treturn this.getClient().sendFile(\n\t\t\t`${this._channelURL()}/file`,\n\t\t\turi,\n\t\t\tname,\n\t\t\tcontentType,\n\t\t\tuser,\n\t\t);\n\t}\n\n\tsendImage(uri, name, contentType, user) {\n\t\treturn this.getClient().sendFile(\n\t\t\t`${this._channelURL()}/image`,\n\t\t\turi,\n\t\t\tname,\n\t\t\tcontentType,\n\t\t\tuser,\n\t\t);\n\t}\n\n\tdeleteFile(url) {\n\t\treturn this.getClient().delete(`${this._channelURL()}/file`, { url });\n\t}\n\n\tdeleteImage(url) {\n\t\treturn this.getClient().delete(`${this._channelURL()}/image`, { url });\n\t}\n\n\t/**\n\t * sendEvent - Send an event on this channel\n\t *\n\t * @param {object} event for example {type: 'message.read'}\n\t *\n\t * @return {object} The Server Response\n\t */\n\tasync sendEvent(event) {\n\t\tthis._checkInitialized();\n\t\treturn await this.getClient().post(this._channelURL() + '/event', {\n\t\t\tevent,\n\t\t});\n\t}\n\n\t/**\n\t * sendReaction - Send a reaction about a message\n\t *\n\t * @param {string} messageID the message id\n\t * @param {object} reaction the reaction object for instance {type: 'love'}\n\t * @param {string} user_id the id of the user (used only for server side request) default null\n\t *\n\t * @return {object} The Server Response\n\t */\n\tasync sendReaction(messageID, reaction, user_id) {\n\t\tif (!messageID) {\n\t\t\tthrow Error(`Message id is missing`);\n\t\t}\n\t\tif (!reaction || Object.keys(reaction).length === 0) {\n\t\t\tthrow Error(`Reaction object is missing`);\n\t\t}\n\t\tconst body = {\n\t\t\treaction,\n\t\t};\n\t\tif (user_id != null) {\n\t\t\tbody.reaction = { ...reaction, user: { id: user_id } };\n\t\t}\n\t\treturn await this.getClient().post(\n\t\t\tthis.getClient().baseURL + `/messages/${messageID}/reaction`,\n\t\t\tbody,\n\t\t);\n\t}\n\n\t/**\n\t * deleteReaction - Delete a reaction by user and type\n\t *\n\t * @param {string} messageID the id of the message from which te remove the reaction\n\t * @param {string} reactionType the type of reaction that should be removed\n\t * @param {string} user_id the id of the user (used only for server side request) default null\n\t *\n\t * @return {object} The Server Response\n\t */\n\tdeleteReaction(messageID, reactionType, user_id) {\n\t\tthis._checkInitialized();\n\t\tif (!reactionType || !messageID) {\n\t\t\tthrow Error(\n\t\t\t\t'Deleting a reaction requires specifying both the message and reaction type',\n\t\t\t);\n\t\t}\n\n\t\tconst url =\n\t\t\tthis.getClient().baseURL + `/messages/${messageID}/reaction/${reactionType}`;\n\t\t//provided when server side request\n\t\tif (user_id) {\n\t\t\treturn this.getClient().delete(url, { user_id });\n\t\t}\n\n\t\treturn this.getClient().delete(url);\n\t}\n\n\t/**\n\t * update - Edit the channel's custom properties\n\t *\n\t * @param {object} custom The object to update the custom properties of this channel with\n\t *\n\t * @return {type} The server response\n\t */\n\tasync update(channelData, updateMessage) {\n\t\tconst data = await this.getClient().post(this._channelURL(), {\n\t\t\tmessage: updateMessage,\n\t\t\tdata: channelData,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\t/**\n\t * delete - Delete the channel.. Messages are permanently removed.\n\t *\n\t * @return {object} The server response\n\t */\n\tasync delete() {\n\t\treturn await this.getClient().delete(this._channelURL());\n\t}\n\n\t/**\n\t * truncate - Removes all messages from the channel\n\t *\n\t * @return {object} The server response\n\t */\n\tasync truncate() {\n\t\treturn await this.getClient().post(this._channelURL() + '/truncate');\n\t}\n\n\tasync acceptInvite(options = {}) {\n\t\tconst data = await this.getClient().post(this._channelURL(), {\n\t\t\taccept_invite: true,\n\t\t\t...options,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\tasync rejectInvite(options = {}) {\n\t\tconst data = await this.getClient().post(this._channelURL(), {\n\t\t\treject_invite: true,\n\t\t\t...options,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\tasync addMembers(members) {\n\t\tconst data = await this.getClient().post(this._channelURL(), {\n\t\t\tadd_members: members,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\tasync addModerators(members) {\n\t\tconst data = await this.getClient().post(this._channelURL(), {\n\t\t\tadd_moderators: members,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\tasync inviteMembers(members) {\n\t\tconst data = await this.getClient().post(this._channelURL(), {\n\t\t\tinvites: members,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\tasync removeMembers(members) {\n\t\tconst data = await this.getClient().post(this._channelURL(), {\n\t\t\tremove_members: members,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\tasync demoteModerators(members) {\n\t\tconst data = await this.getClient().post(this._channelURL(), {\n\t\t\tdemote_moderators: members,\n\t\t});\n\t\tthis.data = data.channel;\n\t\treturn data;\n\t}\n\n\tsendAction(messageID, formData) {\n\t\tthis._checkInitialized();\n\t\tif (!messageID) {\n\t\t\tthrow Error(`Message id is missing`);\n\t\t}\n\t\treturn this.getClient().post(\n\t\t\tthis.getClient().baseURL + `/messages/${messageID}/action`,\n\t\t\t{\n\t\t\t\tmessage_id: messageID,\n\t\t\t\tform_data: formData,\n\t\t\t\tid: this.id,\n\t\t\t\ttype: this.type,\n\t\t\t},\n\t\t);\n\t}\n\n\t/**\n\t * keystroke - First of the typing.start and typing.stop events based on the users keystrokes.\n\t *  Call this on every keystroke\n\t */\n\tasync keystroke() {\n\t\tif (!this.getConfig().typing_events) {\n\t\t\treturn;\n\t\t}\n\t\tconst now = new Date();\n\t\tconst diff = now - this.lastTypingEvent;\n\t\tthis.lastKeyStroke = now;\n\t\tthis.isTyping = true;\n\t\t// send a typing.start every 2 seconds\n\t\tif (diff > 2000) {\n\t\t\tthis.lastTypingEvent = new Date();\n\t\t\tawait this.sendEvent({\n\t\t\t\ttype: 'typing.start',\n\t\t\t});\n\t\t}\n\t}\n\n\t/**\n\t * stopTyping - Sets last typing to null and sends the typing.stop event\n\t */\n\tasync stopTyping() {\n\t\tif (!this.getConfig().typing_events) {\n\t\t\treturn;\n\t\t}\n\t\tthis.lastTypingEvent = null;\n\t\tthis.isTyping = false;\n\t\tawait this.sendEvent({\n\t\t\ttype: 'typing.stop',\n\t\t});\n\t}\n\n\t/**\n\t * lastMessage - return the last message, takes into account that last few messages might not be perfectly sorted\n\t *\n\t * @return {type} Description\n\t */\n\tlastMessage() {\n\t\t// get last 5 messages, sort, return the latest\n\t\t// get a slice of the last 5\n\t\tlet min = this.state.messages.length - 5;\n\t\tif (min < 0) {\n\t\t\tmin = 0;\n\t\t}\n\t\tconst max = this.state.messages.length + 1;\n\t\tconst messageSlice = this.state.messages.slice(min, max).asMutable();\n\n\t\t// sort by pk desc\n\t\tmessageSlice.sort((a, b) => b.created_at - a.created_at);\n\n\t\tlet lastMessage;\n\t\tif (messageSlice.length > 0) {\n\t\t\tlastMessage = messageSlice[0];\n\t\t}\n\t\treturn lastMessage;\n\t}\n\n\t/**\n\t * markRead - Send the mark read event for this user, only works if the `read_events` setting is enabled\n\t *\n\t * @return {Promise} Description\n\t */\n\tasync markRead(data = {}) {\n\t\tthis._checkInitialized();\n\n\t\tif (!this.getConfig().read_events) {\n\t\t\treturn Promise.resolve(null);\n\t\t}\n\n\t\treturn await this.getClient().post(this._channelURL() + '/read', {\n\t\t\t...data,\n\t\t});\n\t}\n\n\t/**\n\t * clean - Cleans the channel state and fires stop typing if needed\n\t */\n\tclean() {\n\t\tif (this.lastKeyStroke) {\n\t\t\tconst now = new Date();\n\t\t\tconst diff = now - this.lastKeyStroke;\n\t\t\tif (diff > 1000 && this.isTyping) {\n\t\t\t\tlogChatPromiseExecution(this.stopTyping(), 'stop typing event');\n\t\t\t}\n\t\t}\n\n\t\tthis.state.clean();\n\t}\n\n\t/**\n\t * watch - Loads the initial channel state and watches for changes\n\t *\n\t * @param {object} options additional options for the query endpoint\n\t *\n\t * @return {object} The server response\n\t */\n\tasync watch(options) {\n\t\tconst defaultOptions = {\n\t\t\tstate: true,\n\t\t\twatch: true,\n\t\t\tpresence: false,\n\t\t};\n\n\t\t// Make sure we wait for the connect promise if there is a pending one\n\t\tawait this.getClient().wsPromise;\n\n\t\tif (!this.getClient()._hasConnectionID()) {\n\t\t\tdefaultOptions.watch = false;\n\t\t}\n\n\t\tconst combined = { ...defaultOptions, ...options };\n\t\tconst state = await this.query(combined);\n\t\tthis.initialized = true;\n\t\tthis._initializeState(state);\n\t\tthis.data = state.channel;\n\n\t\tthis._client.logger(\n\t\t\t'info',\n\t\t\t`channel:watch() - started watching channel ${this.cid}`,\n\t\t\t{\n\t\t\t\ttags: ['channel'],\n\t\t\t\tchannel: this,\n\t\t\t},\n\t\t);\n\t\treturn state;\n\t}\n\n\t/**\n\t * stopwatching - Stops watching the channel\n\t *\n\t * @return {object} The server response\n\t */\n\tasync stopWatching() {\n\t\tconst response = await this.getClient().post(\n\t\t\tthis._channelURL() + '/stop-watching',\n\t\t\t{},\n\t\t);\n\n\t\tthis._client.logger(\n\t\t\t'info',\n\t\t\t`channel:watch() - stopped watching channel ${this.cid}`,\n\t\t\t{\n\t\t\t\ttags: ['channel'],\n\t\t\t\tchannel: this,\n\t\t\t},\n\t\t);\n\n\t\treturn response;\n\t}\n\n\t/**\n\t * getReplies - List the message replies for a parent message\n\t *\n\t * @param {type} parent_id The message parent id, ie the top of the thread\n\t * @param {type} options   Pagination params, ie {limit:10, idlte: 10}\n\t *\n\t * @return {type} A response with a list of messages\n\t */\n\tasync getReplies(parent_id, options) {\n\t\tconst data = await this.getClient().get(\n\t\t\tthis.getClient().baseURL + `/messages/${parent_id}/replies`,\n\t\t\t{\n\t\t\t\t...options,\n\t\t\t},\n\t\t);\n\n\t\t// add any messages to our thread state\n\t\tif (data.messages) {\n\t\t\tthis.state.addMessagesSorted(data.messages);\n\t\t}\n\n\t\treturn data;\n\t}\n\n\t/**\n\t * getReactions - List the reactions, supports pagination\n\t *\n\t * @param {string} message_id The message id\n\t * @param {object} options    The pagination options\n\t *\n\t * @return {object} Server response\n\t */\n\tasync getReactions(message_id, options) {\n\t\treturn await this.getClient().get(\n\t\t\tthis.getClient().baseURL + `/messages/${message_id}/reactions`,\n\t\t\t{\n\t\t\t\t...options,\n\t\t\t},\n\t\t);\n\t}\n\n\t/**\n\t * lastRead - returns the last time the user marked the channel as read if the user never marked the channel as read, this will return null\n\t * @return {date}\n\t */\n\tlastRead() {\n\t\tthis._checkInitialized();\n\t\treturn this.state.read[this.getClient().userID]\n\t\t\t? this.state.read[this.getClient().userID].last_read\n\t\t\t: null;\n\t}\n\n\t/**\n\t * countUnread - Count the number of messages with a date thats newer than the last read timestamp\n\t *\n\t * @param [date] lastRead the time that the user read a message, defaults to current user's read state\n\t *\n\t * @return {int} Unread count\n\t */\n\tcountUnread(lastRead) {\n\t\tif (lastRead == null) {\n\t\t\tlastRead = this.lastRead();\n\t\t}\n\t\tlet count = 0;\n\t\tfor (const m of this.state.messages) {\n\t\t\tif (this.getClient().userID === m.user.id) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (lastRead == null) {\n\t\t\t\tcount++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (m.created_at > lastRead) {\n\t\t\t\tcount++;\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\n\t/**\n\t * countUnread - Count the number of unread messages mentioning the current user\n\t *\n\t * @return {int} Unread mentions count\n\t */\n\tcountUnreadMentions() {\n\t\tconst lastRead = this.lastRead();\n\t\tlet count = 0;\n\t\tfor (const m of this.state.messages) {\n\t\t\tif (this.getClient().userID === m.user.id) {\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (lastRead == null) {\n\t\t\t\tcount++;\n\t\t\t\tcontinue;\n\t\t\t}\n\t\t\tif (m.created_at > lastRead) {\n\t\t\t\tconst userID = this.getClient().userID;\n\t\t\t\tif (m.mentioned_users.findIndex(u => u.id === userID) !== -1) {\n\t\t\t\t\tcount++;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\treturn count;\n\t}\n\n\t/**\n\t * create - Creates a new channel\n\t *\n\t * @return {type} The Server Reponse\n\t */\n\tcreate = async () => {\n\t\tconst options = {\n\t\t\twatch: false,\n\t\t\tstate: false,\n\t\t\tpresence: false,\n\t\t};\n\t\treturn await this.query(options);\n\t};\n\n\t/**\n\t * query - Query the API, get messages, members or other channel fields\n\t *\n\t * @param {object} options The query options\n\t *\n\t * @return {object} Returns a query response\n\t */\n\tasync query(options) {\n\t\t// Make sure we wait for the connect promise if there is a pending one\n\t\tawait this.getClient().wsPromise;\n\n\t\tlet queryURL = `${this.getClient().baseURL}/channels/${this.type}`;\n\t\tif (this.id) {\n\t\t\tqueryURL += `/${this.id}`;\n\t\t}\n\n\t\tconst state = await this.getClient().post(queryURL + '/query', {\n\t\t\tdata: this._data,\n\t\t\tstate: true,\n\t\t\t...options,\n\t\t});\n\n\t\t// update the channel id if it was missing\n\t\tif (!this.id) {\n\t\t\tthis.id = state.channel.id;\n\t\t\tthis.cid = state.channel.cid;\n\t\t\t// set the channel as active...\n\t\t\tif (!(this.cid in this.getClient().activeChannels)) {\n\t\t\t\tthis.getClient().activeChannels[this.cid] = this;\n\t\t\t}\n\t\t}\n\n\t\tthis.getClient()._addChannelConfig(state);\n\n\t\t// add any messages to our channel state\n\t\tthis._initializeState(state);\n\n\t\treturn state;\n\t}\n\n\t/**\n\t * banUser - Bans a user from a channel\n\t *\n\t * @param targetUserID\n\t * @param options\n\t * @returns {Promise<*>}\n\t */\n\tasync banUser(targetUserID, options) {\n\t\tthis._checkInitialized();\n\t\treturn await this.getClient().banUser(targetUserID, {\n\t\t\t...options,\n\t\t\ttype: this.type,\n\t\t\tid: this.id,\n\t\t});\n\t}\n\n\t/**\n\t * hides the channel from queryChannels for the user until a message is added\n\t *\n\t * @param userId\n\t * @returns {Promise<*>}\n\t */\n\tasync hide(userId = null) {\n\t\tthis._checkInitialized();\n\t\treturn await this.getClient().post(`${this._channelURL()}/hide`, {\n\t\t\tuser_id: userId,\n\t\t});\n\t}\n\n\t/**\n\t * removes the hidden status for a channel\n\t *\n\t * @param userId\n\t * @returns {Promise<*>}\n\t */\n\tasync show(userId = null) {\n\t\tthis._checkInitialized();\n\t\treturn await this.getClient().post(`${this._channelURL()}/show`, {\n\t\t\tuser_id: userId,\n\t\t});\n\t}\n\n\t/**\n\t * banUser - Removes the bans for a user on a channel\n\t *\n\t * @param targetUserID\n\t * @returns {Promise<*>}\n\t */\n\tasync unbanUser(targetUserID) {\n\t\tthis._checkInitialized();\n\t\treturn await this.getClient().unbanUser(targetUserID, {\n\t\t\ttype: this.type,\n\t\t\tid: this.id,\n\t\t});\n\t}\n\n\t/**\n\t * on - Listen to events on this channel.\n\t *\n\t * channel.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n\t * or\n\t * channel.on(event => {console.log(event.type)})\n\t *\n\t * @param {string} callbackOrString  The event type to listen for (optional)\n\t * @param {function} callbackOrNothing The callback to call\n\t *\n\t * @return {type} Description\n\t */\n\ton(callbackOrString, callbackOrNothing) {\n\t\tconst key = callbackOrNothing ? callbackOrString : 'all';\n\t\tconst valid = isValidEventType(key);\n\t\tif (!valid) {\n\t\t\tthrow Error(`Invalid event type ${key}`);\n\t\t}\n\t\tconst callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n\t\tif (!(key in this.listeners)) {\n\t\t\tthis.listeners[key] = [];\n\t\t}\n\t\tthis._client.logger(\n\t\t\t'info',\n\t\t\t`Attaching listener for ${key} event on channel ${this.cid}`,\n\t\t\t{\n\t\t\t\ttags: ['event', 'channel'],\n\t\t\t\tchannel: this,\n\t\t\t},\n\t\t);\n\n\t\tthis.listeners[key].push(callback);\n\t}\n\n\t/**\n\t * off - Remove the event handler\n\t *\n\t */\n\toff(callbackOrString, callbackOrNothing) {\n\t\tthis._checkInitialized();\n\t\tconst key = callbackOrNothing ? callbackOrString : 'all';\n\t\tconst valid = isValidEventType(key);\n\t\tif (!valid) {\n\t\t\tthrow Error(`Invalid event type ${key}`);\n\t\t}\n\t\tconst callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n\t\tif (!(key in this.listeners)) {\n\t\t\tthis.listeners[key] = [];\n\t\t}\n\n\t\tthis._client.logger(\n\t\t\t'info',\n\t\t\t`Removing listener for ${key} event from channel ${this.cid}`,\n\t\t\t{ tags: ['event', 'channel'], channel: this },\n\t\t);\n\t\tthis.listeners[key] = this.listeners[key].filter(value => value !== callback);\n\t}\n\n\t_handleChannelEvent(event) {\n\t\tconst channel = this;\n\t\tthis._client.logger(\n\t\t\t'info',\n\t\t\t`channel:_handleChannelEvent - Received event of type { ${event.type} } on ${this.cid}`,\n\t\t\t{\n\t\t\t\ttags: ['event', 'channel'],\n\t\t\t\tchannel: this,\n\t\t\t},\n\t\t);\n\n\t\tconst s = channel.state;\n\t\tswitch (event.type) {\n\t\t\tcase 'typing.start':\n\t\t\t\ts.typing = s.typing.set(event.user.id, Immutable(event));\n\t\t\t\tbreak;\n\t\t\tcase 'typing.stop':\n\t\t\t\ts.typing = s.typing.without(event.user.id);\n\t\t\t\tbreak;\n\t\t\tcase 'message.read':\n\t\t\t\ts.read = s.read.set(\n\t\t\t\t\tevent.user.id,\n\t\t\t\t\tImmutable({ user: { ...event.user }, last_read: event.received_at }),\n\t\t\t\t);\n\t\t\t\tbreak;\n\t\t\tcase 'user.watching.start':\n\t\t\tcase 'user.updated':\n\t\t\t\ts.watchers = s.watchers.set(event.user.id, Immutable(event.user));\n\t\t\t\tbreak;\n\t\t\tcase 'user.watching.stop':\n\t\t\t\ts.watchers = s.watchers.without(event.user.id);\n\t\t\t\tbreak;\n\t\t\tcase 'message.new':\n\t\t\tcase 'message.updated':\n\t\t\tcase 'message.deleted':\n\t\t\t\ts.addMessageSorted(event.message);\n\t\t\t\tbreak;\n\t\t\tcase 'member.added':\n\t\t\tcase 'member.updated':\n\t\t\t\ts.members = s.members.set(event.member.user_id, Immutable(event.member));\n\t\t\t\tbreak;\n\t\t\tcase 'member.removed':\n\t\t\t\ts.members = s.members.without(event.user.id);\n\t\t\t\tbreak;\n\t\t\tcase 'channel.updated':\n\t\t\t\tchannel.data = Immutable(event.channel);\n\t\t\t\tbreak;\n\t\t\tcase 'reaction.new':\n\t\t\t\ts.addReaction(event.reaction, event.message);\n\t\t\t\tbreak;\n\t\t\tcase 'reaction.deleted':\n\t\t\t\ts.removeReaction(event.reaction, event.message);\n\t\t\t\tbreak;\n\t\t\tdefault:\n\t\t}\n\n\t\t// any event can send over the online count\n\t\tif (event.watcher_count !== undefined) {\n\t\t\tchannel.state.watcher_count = event.watcher_count;\n\t\t}\n\t}\n\n\t_callChannelListeners = event => {\n\t\tconst channel = this;\n\t\t// gather and call the listeners\n\t\tconst listeners = [];\n\t\tif (channel.listeners.all) {\n\t\t\tlisteners.push(...channel.listeners.all);\n\t\t}\n\t\tif (channel.listeners[event.type]) {\n\t\t\tlisteners.push(...channel.listeners[event.type]);\n\t\t}\n\n\t\t// call the event and send it to the listeners\n\t\tfor (const listener of listeners) {\n\t\t\tlistener(event);\n\t\t}\n\t};\n\n\t/**\n\t * _channelURL - Returns the channel url\n\t *\n\t * @return {string} The channel url\n\t */\n\t_channelURL = () => {\n\t\tif (!this.id) {\n\t\t\tthrow new Error('channel id is not defined');\n\t\t}\n\t\treturn `${this.getClient().baseURL}/channels/${this.type}/${this.id}`;\n\t};\n\n\t_checkInitialized() {\n\t\tif (!this.initialized && !this.getClient()._isUsingServerAuth()) {\n\t\t\tthrow Error(\n\t\t\t\t`Channel ${this.cid} hasn't been initialized yet. Make sure to call .watch() and wait for it to resolve`,\n\t\t\t);\n\t\t}\n\t}\n\n\t_initializeState(state) {\n\t\t// add the Users\n\t\tif (state.members) {\n\t\t\tfor (const m of state.members) {\n\t\t\t\tthis.getClient().state.updateUserReference(m.user, this.cid);\n\t\t\t}\n\t\t}\n\n\t\tif (state.watchers) {\n\t\t\tfor (const w of state.watchers) {\n\t\t\t\tthis.getClient().state.updateUserReference(w.user, this.cid);\n\t\t\t}\n\t\t}\n\n\t\t// immutable list of maps\n\t\tconst messages = state.messages || [];\n\t\tif (!this.state.messages) {\n\t\t\tthis.state.messages = Immutable([]);\n\t\t}\n\t\tthis.state.addMessagesSorted(messages, true);\n\t\tthis.state.watcher_count = state.watcher_count;\n\t\t// convert the arrays into objects for easier syncing...\n\t\tif (state.watchers) {\n\t\t\tfor (const watcher of state.watchers) {\n\t\t\t\tthis.state.watchers = this.state.watchers.set(watcher.id, watcher);\n\t\t\t}\n\t\t}\n\t\tif (state.read) {\n\t\t\tif (this.getClient().userID != null) {\n\t\t\t\tthis.state.read = this.state.read.set(\n\t\t\t\t\tthis.getClient().user.id,\n\t\t\t\t\tnew Date(0),\n\t\t\t\t);\n\t\t\t}\n\t\t\tfor (const read of state.read) {\n\t\t\t\tconst parsedRead = Object.assign({ ...read });\n\t\t\t\tparsedRead.last_read = new Date(read.last_read);\n\t\t\t\tthis.state.read = this.state.read.set(read.user.id, parsedRead);\n\t\t\t}\n\t\t}\n\t\tif (state.members) {\n\t\t\tfor (const m of state.members) {\n\t\t\t\tthis.state.members = this.state.members.set(m.user.id, m);\n\t\t\t}\n\t\t}\n\t}\n\n\t_disconnect() {\n\t\tthis._client.logger(\n\t\t\t'info',\n\t\t\t`channel:disconnect() - Disconnecting the channel ${this.cid}`,\n\t\t\t{\n\t\t\t\ttags: ['connection', 'channel'],\n\t\t\t\tchannel: this,\n\t\t\t},\n\t\t);\n\n\t\tthis.disconnected = true;\n\t}\n}\n","import Immutable from 'seamless-immutable';\n\n/**\n * ClientState - A container class for the client state.\n */\nexport class ClientState {\n\tconstructor() {\n\t\t// show the status for a certain user...\n\t\t// ie online, offline etc\n\t\tthis.users = Immutable({});\n\t\t// store which channels contain references to the specified user...\n\t\tthis.userChannelReferences = {};\n\t}\n\n\tupdateUsers(users) {\n\t\tfor (const user of users) {\n\t\t\tthis.updateUser(user);\n\t\t}\n\t}\n\n\tupdateUser(user) {\n\t\tif (user != null) {\n\t\t\tthis.users = this.users.set(user.id, Immutable(user));\n\t\t}\n\t}\n\n\tupdateUserReference(user, channelID) {\n\t\tif (user == null) {\n\t\t\treturn;\n\t\t}\n\t\tthis.updateUser(user);\n\t\tif (!this.userChannelReferences[user.id]) {\n\t\t\tthis.userChannelReferences[user.id] = {};\n\t\t}\n\t\tthis.userChannelReferences[user.id][channelID] = true;\n\t}\n}\n","import isoWS from 'isomorphic-ws';\nimport { sleep } from './utils';\n/**\n * StableWSConnection - A WS connection that reconnects upon failure.\n * - the browser will sometimes report that you're online or offline\n * - the WS connection can break and fail (there is a 30s health check)\n * - sometimes your WS connection will seem to work while the user is in fact offline\n * - to speed up online/offline detection you can use the window.addEventListener('offline');\n *\n * There are 4 ways in which a connection can become unhealthy:\n * - websocket.onerror is called\n * - websocket.onclose is called\n * - the health check fails and no event is received for ~40 seconds\n * - the browser indicates the connection is now offline\n *\n * There are 2 assumptions we make about the server:\n * - state can be recovered by querying the channel again\n * - if the servers fails to publish a message to the client, the WS connection is destroyed\n */\nexport class StableWSConnection {\n\tconstructor({\n\t\twsURL,\n\t\tclientID,\n\t\tuserID,\n\t\tmessageCallback,\n\t\trecoverCallback,\n\n\t\teventCallback,\n\t\tlogger,\n\t}) {\n\t\tthis.wsURL = wsURL;\n\t\tthis.clientID = clientID;\n\t\tthis.userID = userID;\n\t\t/** consecutive failures influence the duration of the timeout */\n\t\tthis.consecutiveFailures = 0;\n\t\t/** keep track of the total number of failures */\n\t\tthis.totalFailures = 0;\n\n\t\t/** We only make 1 attempt to reconnect at the same time.. */\n\t\tthis.isConnecting = false;\n\t\t/** Boolean that indicates if we have a working connection to the server */\n\t\tthis.isHealthy = false;\n\n\t\t/** Callback when the connection fails and recovers */\n\t\tthis.recoverCallback = recoverCallback;\n\t\tthis.messageCallback = messageCallback;\n\t\tthis.eventCallback = eventCallback;\n\n\t\tthis.logger = logger;\n\n\t\t/** Incremented when a new WS connection is made */\n\t\tthis.wsID = 1;\n\n\t\t/** Store the last event time for health checks */\n\t\tthis.lastEvent = null;\n\n\t\t/** Send a health check message every 30 seconds */\n\t\tthis.healthCheckInterval = 30 * 1000;\n\t\t/** Every second we verify that we didn't miss any health checks */\n\t\tthis.monitorInterval = 1 * 1000;\n\n\t\tthis._listenForConnectionChanges();\n\t}\n\n\t/**\n\t * connect - Connect to the WS URL\n\t *\n\t * @return {promise} Promise that completes once the first health check message is received\n\t */\n\tasync connect() {\n\t\tlet healthCheck;\n\t\tif (this.isConnecting) {\n\t\t\tthrow Error(\n\t\t\t\t`You've called connect twice, can only attempt 1 connection at the time`,\n\t\t\t);\n\t\t}\n\t\ttry {\n\t\t\tthis.isConnecting = true;\n\t\t\thealthCheck = await this._connect();\n\t\t\tthis.isConnecting = false;\n\t\t\tthis.consecutiveFailures = 0;\n\t\t\tthis._startMonitor();\n\t\t\tthis._startHealthCheck();\n\t\t\tthis.logger(\n\t\t\t\t'info',\n\t\t\t\t`connection:connect() - Established ws connection with healthcheck: ${healthCheck}`,\n\t\t\t\t{\n\t\t\t\t\ttags: ['connection'],\n\t\t\t\t},\n\t\t\t);\n\t\t\treturn healthCheck;\n\t\t} catch (e) {\n\t\t\tthis.isConnecting = false;\n\t\t\tif (!e.isWSFailure) {\n\t\t\t\t// This is a permanent failure, throw the error...\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\t/**\n\t * disconnect - Disconnect the connection and doesn't recover...\n\t *\n\t */\n\tdisconnect() {\n\t\tthis.logger(\n\t\t\t'info',\n\t\t\t`connection:disconnect() - Closing the websocket connection for wsID ${this.wsID}`,\n\t\t\t{\n\t\t\t\ttags: ['connection'],\n\t\t\t},\n\t\t);\n\n\t\t// start by removing all the listeners\n\t\tif (this.healthCheckIntervalRef) {\n\t\t\tclearInterval(this.healthCheckIntervalRef);\n\t\t}\n\t\tif (this.monitorIntervalRef) {\n\t\t\tclearInterval(this.monitorIntervalRef);\n\t\t}\n\n\t\tthis._removeConnectionListeners();\n\n\t\t// reset the wsID;\n\t\tthis.wsID = 1;\n\t\tthis.isHealthy = false;\n\n\t\t// remove ws handlers...\n\t\tif (this.ws && this.ws.removeAllListeners) {\n\t\t\tthis.ws.removeAllListeners();\n\t\t}\n\n\t\tlet isClosedPromise;\n\t\t// and finally close...\n\t\tif (this.ws && this.ws.close) {\n\t\t\t// Assigning to local here because we will remove it from this before the\n\t\t\t// promise resolves.\n\t\t\tconst { ws } = this;\n\t\t\tisClosedPromise = new Promise(resolve => {\n\t\t\t\tws.onclose = () => {\n\t\t\t\t\tresolve();\n\t\t\t\t};\n\t\t\t});\n\t\t\tws.close(1000, 'Manually closed connection by calling client.disconnect()');\n\t\t}\n\n\t\tdelete this.ws;\n\n\t\treturn isClosedPromise;\n\t}\n\n\t/**\n\t * _connect - Connect to the WS endpoint\n\t *\n\t * @return {promise} Promise that completes once the first health check message is received\n\t */\n\tasync _connect() {\n\t\tthis._setupConnectionPromise();\n\t\tthis.ws = new isoWS(this.wsURL);\n\t\tthis.ws.onopen = this.onopen.bind(this, this.wsID);\n\t\tthis.ws.onclose = this.onclose.bind(this, this.wsID);\n\t\tthis.ws.onerror = this.onerror.bind(this, this.wsID);\n\t\tthis.ws.onmessage = this.onmessage.bind(this, this.wsID);\n\n\t\tconst response = await this.connectionOpen;\n\t\tthis.connectionID = response.connection_id;\n\n\t\treturn response;\n\t}\n\n\t/**\n\t * _reconnect - Description\n\t *\n\t * @param {int} interval number of ms to wait before connecting\n\t */\n\tasync _reconnect(interval) {\n\t\tthis.logger('info', 'connection:_reconnect() - Initiating the reconnect', {\n\t\t\ttags: ['connection'],\n\t\t});\n\t\t// only allow 1 connection at the time\n\t\tif (this.isConnecting || this.isHealthy) {\n\t\t\tthis.logger(\n\t\t\t\t'info',\n\t\t\t\t'connection:_reconnect() - Abort (1) since already connecting or healthy',\n\t\t\t\t{\n\t\t\t\t\ttags: ['connection'],\n\t\t\t\t},\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\t// reconnect in case of on error or on close\n\t\t// also reconnect if the health check cycle fails\n\t\tif (interval === undefined) {\n\t\t\tinterval = this._retryInterval();\n\t\t}\n\n\t\t// reconnect, or try again after a little while...\n\t\tawait sleep(interval);\n\n\t\t// Check once again if by some other call to _reconnect is active or connection is\n\t\t// already restored, then no need to proceed.\n\t\tif (this.isConnecting || this.isHealthy) {\n\t\t\tthis.logger(\n\t\t\t\t'info',\n\t\t\t\t'connection:_reconnect() - Abort (2) since already connecting or healthy',\n\t\t\t\t{\n\t\t\t\t\ttags: ['connection'],\n\t\t\t\t},\n\t\t\t);\n\t\t\treturn;\n\t\t}\n\n\t\tthis.isConnecting = true;\n\n\t\t// cleanup the old connection\n\t\tthis.logger(\n\t\t\t'info',\n\t\t\t'connection:_reconnect() : Destroying current WS connection',\n\t\t\t{\n\t\t\t\ttags: ['connection'],\n\t\t\t},\n\t\t);\n\t\tthis._destroyCurrentWSConnection();\n\n\t\ttry {\n\t\t\tconst open = await this._connect();\n\t\t\tif (this.recoverCallback) {\n\t\t\t\tthis.logger(\n\t\t\t\t\t'info',\n\t\t\t\t\t'connection:_reconnect() : Waiting for recoverCallBack',\n\t\t\t\t\t{\n\t\t\t\t\t\ttags: ['connection'],\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tawait this.recoverCallback(open);\n\t\t\t\tthis.logger(\n\t\t\t\t\t'info',\n\t\t\t\t\t'connection:_reconnect() : Finished recoverCallBack',\n\t\t\t\t\t{\n\t\t\t\t\t\ttags: ['connection'],\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t}\n\t\t\tthis.isConnecting = false;\n\t\t\tthis.consecutiveFailures = 0;\n\t\t} catch (e) {\n\t\t\tthis.isConnecting = false;\n\t\t\t// reconnect on WS failures, dont reconnect if there is a code bug\n\t\t\tif (e.isWSFailure) {\n\t\t\t\tthis.logger(\n\t\t\t\t\t'info',\n\t\t\t\t\t'connection:_reconnect() : WS failure, so going to try to reconnect',\n\t\t\t\t\t{\n\t\t\t\t\t\ttags: ['connection'],\n\t\t\t\t\t},\n\t\t\t\t);\n\t\t\t\tthis._reconnect();\n\t\t\t}\n\t\t}\n\t\tthis.logger('info', 'connection:_reconnect() : == END ==', {\n\t\t\ttags: ['connection'],\n\t\t});\n\t}\n\n\t/**\n\t * onlineStatusChanged - this function is called when the browser connects or disconnects from the internet.\n\t *\n\t * @param {object} event Event with type online or offline\n\t *\n\t */\n\tonlineStatusChanged = event => {\n\t\tif (event.type === 'offline') {\n\t\t\t// mark the connection as down\n\t\t\tthis.logger(\n\t\t\t\t'info',\n\t\t\t\t'connection:onlineStatusChanged() : Status changing to offline',\n\t\t\t\t{\n\t\t\t\t\ttags: ['connection'],\n\t\t\t\t},\n\t\t\t);\n\t\t\tthis._setHealth(false);\n\t\t} else if (event.type === 'online') {\n\t\t\t// retry right now...\n\t\t\t// We check this.isHealthy, not sure if it's always\n\t\t\t// smart to create a new WS connection if the old one is still up and running.\n\t\t\t// it's possible we didnt miss any messages, so this process is just expensive and not needed.\n\t\t\tthis.logger(\n\t\t\t\t'info',\n\t\t\t\t`connection:onlineStatusChanged() : Status changing to online. isHealthy: ${this.isHealthy}`,\n\t\t\t\t{\n\t\t\t\t\ttags: ['connection'],\n\t\t\t\t},\n\t\t\t);\n\t\t\tif (!this.isHealthy) {\n\t\t\t\tthis._reconnect(10);\n\t\t\t}\n\t\t}\n\t};\n\n\tonopen = wsID => {\n\t\tif (this.wsID !== wsID) return;\n\n\t\t// set healthy..\n\t\tthis._setHealth(true);\n\t};\n\n\tonmessage = (wsID, event) => {\n\t\tif (this.wsID !== wsID) return;\n\n\t\t// we wait till the first message before we consider the connection open..\n\t\t// the reason for this is that auth errors and similar errors trigger a ws.onopen and immediately\n\t\t// after that a ws.onclose..\n\t\tif (!this.isResolved) {\n\t\t\tthis.resolvePromise(event);\n\t\t}\n\n\t\t// trigger the event..\n\t\tthis.lastEvent = new Date();\n\t\tthis.messageCallback(event);\n\t};\n\n\tonclose = (wsID, event) => {\n\t\tif (this.wsID !== wsID) return;\n\n\t\tif (event.code === 1000) {\n\t\t\t// this is a permanent error raised by stream..\n\t\t\t// usually caused by invalid auth details\n\t\t\tconst error = new Error(`WS connection reject with error ${event.reason}`);\n\t\t\terror.reason = event.reason;\n\t\t\tthis.rejectPromise(error);\n\t\t} else {\n\t\t\tthis.consecutiveFailures += 1;\n\t\t\tthis.totalFailures += 1;\n\t\t\tthis._setHealth(false);\n\n\t\t\tthis.rejectPromise(this._errorFromWSEvent(event));\n\n\t\t\t// reconnect if its an abnormal failure\n\t\t\tthis._reconnect();\n\t\t}\n\t};\n\n\tonerror = (wsID, event) => {\n\t\tif (this.wsID !== wsID) return;\n\n\t\tthis.consecutiveFailures += 1;\n\t\tthis.totalFailures += 1;\n\t\tthis._setHealth(false);\n\n\t\tthis.rejectPromise(this._errorFromWSEvent(event));\n\n\t\tthis._reconnect();\n\t};\n\n\t/**\n\t * _setHealth - Sets the connection to healthy or unhealthy.\n\t * Broadcasts an event in case the connection status changed.\n\t *\n\t * @param {bool} healthy boolean indicating if the connection is healthy or not\n\t *\n\t */\n\t_setHealth = healthy => {\n\t\tif (healthy && !this.isHealthy) {\n\t\t\t// yee we are online:\n\t\t\tthis.isHealthy = true;\n\t\t\tthis.eventCallback({\n\t\t\t\ttype: 'connection.changed',\n\t\t\t\tonline: true,\n\t\t\t});\n\t\t}\n\n\t\tif (!healthy && this.isHealthy) {\n\t\t\t// bummer we are offline\n\t\t\tthis.isHealthy = false;\n\t\t\tsetTimeout(() => {\n\t\t\t\tif (!this.isHealthy) {\n\t\t\t\t\tthis.eventCallback({\n\t\t\t\t\t\ttype: 'connection.changed',\n\t\t\t\t\t\tonline: false,\n\t\t\t\t\t});\n\t\t\t\t}\n\t\t\t}, 5000);\n\t\t}\n\t};\n\n\t/**\n\t * _errorFromWSEvent - Creates an error object for the WS event\n\t *\n\t */\n\t_errorFromWSEvent = event => {\n\t\tconst error = new Error(`WS failed with code ${event.code}`);\n\t\terror.code = event.code;\n\t\terror.isWSFailure = true;\n\t\treturn error;\n\t};\n\n\t/**\n\t * _listenForConnectionChanges - Adds an event listener for the browser going online or offline\n\t *\n\t */\n\t_listenForConnectionChanges = () => {\n\t\tif (\n\t\t\ttypeof window !== 'undefined' &&\n\t\t\twindow != null &&\n\t\t\twindow.addEventListener != null\n\t\t) {\n\t\t\twindow.addEventListener('offline', this.onlineStatusChanged);\n\t\t\twindow.addEventListener('online', this.onlineStatusChanged);\n\t\t}\n\t};\n\n\t_removeConnectionListeners = () => {\n\t\tif (\n\t\t\ttypeof window !== 'undefined' &&\n\t\t\twindow != null &&\n\t\t\twindow.addEventListener != null\n\t\t) {\n\t\t\twindow.removeEventListener('offline', this.onlineStatusChanged);\n\t\t\twindow.removeEventListener('online', this.onlineStatusChanged);\n\t\t}\n\t};\n\n\t/**\n\t * _destroyCurrentWSConnection - Removes the current WS connnection\n\t *\n\t */\n\t_destroyCurrentWSConnection() {\n\t\t// increment the ID, meaning we will ignore all messages from the old\n\t\t// ws connection from now on.\n\t\tthis.wsID += 1;\n\n\t\ttry {\n\t\t\tif (this.ws && this.ws.removeAllListeners) {\n\t\t\t\tthis.ws.removeAllListeners();\n\t\t\t}\n\n\t\t\tif (this.ws && this.ws.close) {\n\t\t\t\tthis.ws.close();\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t// we dont care\n\t\t}\n\t}\n\n\t/**\n\t * _retryInterval - A retry interval which increases after consecutive failures\n\t *\n\t * @return {int} Duration to wait in milliseconds\n\t */\n\t_retryInterval() {\n\t\t// try to reconnect in 0-5 seconds (random to spread out the load from failures)\n\t\tconst max = Math.min(500 + this.consecutiveFailures * 2000, 25000);\n\t\tconst min = Math.min(Math.max(250, (this.consecutiveFailures - 1) * 2000), 25000);\n\t\treturn Math.floor(Math.random() * (max - min) + min);\n\t}\n\n\t/**\n\t * _setupPromise - sets up the this.connectOpen promise\n\t */\n\t_setupConnectionPromise = () => {\n\t\tconst that = this;\n\t\tthis.isResolved = false;\n\t\t/** a promise that is resolved once ws.open is called */\n\t\tthis.connectionOpen = new Promise(function(resolve, reject) {\n\t\t\tthat.resolvePromise = resolve;\n\t\t\tthat.rejectPromise = reject;\n\t\t}).then(e => {\n\t\t\tconst data = JSON.parse(e.data);\n\t\t\tif (data.error != null) {\n\t\t\t\tthrow new Error(JSON.stringify(data.error));\n\t\t\t}\n\t\t\treturn data;\n\t\t});\n\t};\n\n\t/**\n\t * _startHealthCheck - Sends a message every 30s or so to see if the ws connection still works\n\t *\n\t */\n\t_startHealthCheck() {\n\t\tconst that = this;\n\t\t// 30 seconds is the recommended interval (messenger uses this)\n\t\tthis.healthCheckIntervalRef = setInterval(() => {\n\t\t\t// send the healthcheck.., server replies with a health check event\n\t\t\tconst data = [\n\t\t\t\t{\n\t\t\t\t\ttype: 'health.check',\n\t\t\t\t\tclient_id: that.clientID,\n\t\t\t\t\tuser_id: that.userID,\n\t\t\t\t},\n\t\t\t];\n\t\t\t// try to send on the connection\n\t\t\ttry {\n\t\t\t\tthat.ws.send(JSON.stringify(data));\n\t\t\t} catch (e) {\n\t\t\t\t// error will already be detected elsewhere\n\t\t\t}\n\t\t}, that.healthCheckInterval);\n\t}\n\n\t/**\n\t * _startMonitor - Verifies we didn't miss any events. Marks the connection as failed in case we did.\n\t *\n\t */\n\t_startMonitor() {\n\t\tconst that = this;\n\t\tthis.monitorIntervalRef = setInterval(() => {\n\t\t\tconst now = new Date();\n\t\t\t// means we missed a health check\n\t\t\tif (now - that.lastEvent > this.healthCheckInterval + 10 * 1000) {\n\t\t\t\tthis.logger('info', 'connection:_startMonitor - going to reconnect', {\n\t\t\t\t\ttags: ['connection'],\n\t\t\t\t});\n\t\t\t\tthat._setHealth(false);\n\t\t\t\tthat._reconnect();\n\t\t\t}\n\t\t}, that.monitorInterval);\n\t}\n}\n","export default null;","export default null;","import jwt from 'jsonwebtoken';\nimport crypto from 'crypto';\n\n/**\n * Creates the JWT token that can be used for a UserSession\n * @method JWTUserSessionToken\n * @memberof signing\n * @private\n * @param {string} apiSecret - API Secret key\n * @param {string} userId - The user_id key in the JWT payload\n * @param {object} [extraData] - Extra that should be part of the JWT token\n * @param {object} [jwtOptions] - Options that can be past to jwt.sign\n * @return {string} JWT Token\n */\nexport function JWTUserToken(apiSecret, userId, extraData = {}, jwtOptions = {}) {\n\tif (typeof userId !== 'string') {\n\t\tthrow new TypeError('userId should be a string');\n\t}\n\n\tconst payload = {\n\t\tuser_id: userId,\n\t\t...extraData,\n\t};\n\n\tconst opts = Object.assign({ algorithm: 'HS256', noTimestamp: true }, jwtOptions);\n\treturn jwt.sign(payload, apiSecret, opts);\n}\n\nexport function JWTServerToken(apiSecret, jwtOptions = {}) {\n\tconst payload = {\n\t\tserver: true,\n\t};\n\n\tconst opts = Object.assign({ algorithm: 'HS256', noTimestamp: true }, jwtOptions);\n\treturn jwt.sign(payload, apiSecret, opts);\n}\n\nfunction decodeBase64(s) {\n\tconst e = {},\n\t\tw = String.fromCharCode,\n\t\tL = s.length;\n\tlet i,\n\t\tb = 0,\n\t\tc,\n\t\tx,\n\t\tl = 0,\n\t\ta,\n\t\tr = '';\n\tconst A = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\tfor (i = 0; i < 64; i++) {\n\t\te[A.charAt(i)] = i;\n\t}\n\tfor (x = 0; x < L; x++) {\n\t\tc = e[s.charAt(x)];\n\t\tb = (b << 6) + c;\n\t\tl += 6;\n\t\twhile (l >= 8) {\n\t\t\t((a = (b >>> (l -= 8)) & 0xff) || x < L - 2) && (r += w(a));\n\t\t}\n\t}\n\treturn r;\n}\n\n/**\n * @return {string}\n */\nexport function UserFromToken(token) {\n\tconst fragments = token.split('.');\n\tif (fragments.length !== 3) {\n\t\treturn '';\n\t}\n\tconst b64Payload = fragments[1];\n\tconst payload = decodeBase64(b64Payload);\n\tconst data = JSON.parse(payload);\n\treturn data.user_id;\n}\n\nfunction encodeBase64(s) {\n\tif (typeof window !== 'undefined' && window.btoa) {\n\t\treturn window.btoa(s);\n\t} else {\n\t\treturn Buffer.from(s.toString(), 'binary').toString('base64');\n\t}\n}\n\n/**\n *\n * @param userId {string} the id of the user\n * @return {string}\n */\nexport function DevToken(userId) {\n\treturn [\n\t\t'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9', //{\"alg\": \"HS256\", \"typ\": \"JWT\"}\n\t\tencodeBase64(JSON.stringify({ user_id: userId })),\n\t\t'devtoken', // hardcoded signature\n\t].join('.');\n}\n\n/**\n *\n * @param body {string} the signed message\n * @param secret {string} the shared secret used to generate the signature (Stream API secret)\n * @param signature {string} the signature to validate\n * @return {boolean}\n */\nexport function CheckSignature(body, secret, signature) {\n\tconst key = Buffer.from(secret, 'ascii');\n\tconst hash = crypto\n\t\t.createHmac('sha256', key)\n\t\t.update(body)\n\t\t.digest('hex');\n\treturn hash === signature;\n}\n","export default null;","export default null;","/* eslint no-unused-vars: \"off\" */\n/* global process */\n\nimport axios from 'axios';\nimport uuidv4 from 'uuid/v4';\nimport { Channel } from './channel';\nimport { ClientState } from './client_state';\nimport { StableWSConnection } from './connection';\n\nimport { isValidEventType } from './events';\n\nimport {\n\tJWTServerToken,\n\tJWTUserToken,\n\tUserFromToken,\n\tDevToken,\n\tCheckSignature,\n} from './signing';\nimport http from 'http';\nimport https from 'https';\nimport fetch, { Headers } from 'cross-fetch';\nimport FormData from 'form-data';\nimport pkg from '../package.json';\n\nfunction isReadableStream(obj) {\n\treturn (\n\t\tobj !== null &&\n\t\ttypeof obj === 'object' &&\n\t\ttypeof obj._read === 'function' &&\n\t\ttypeof obj._readableState === 'object'\n\t);\n}\n\nfunction isFunction(value) {\n\treturn (\n\t\tvalue &&\n\t\t(Object.prototype.toString.call(value) === '[object Function]' ||\n\t\t\t'function' === typeof value ||\n\t\t\tvalue instanceof Function)\n\t);\n}\n\nexport class StreamChat {\n\tconstructor(key, secretOrOptions, options) {\n\t\t// set the key\n\t\tthis.key = key;\n\t\tthis.userToken = null;\n\t\tthis.secret = null;\n\t\tthis.listeners = {};\n\t\tthis.state = new ClientState();\n\n\t\t// set the secret\n\t\tif (secretOrOptions && secretOrOptions.indexOf) {\n\t\t\tthis.secret = secretOrOptions;\n\t\t}\n\n\t\t// set the options... and figure out defaults...\n\t\toptions = options || secretOrOptions;\n\t\tif (!options) {\n\t\t\toptions = {};\n\t\t}\n\n\t\tthis.browser =\n\t\t\ttypeof options.browser !== 'undefined'\n\t\t\t\t? options.browser\n\t\t\t\t: typeof window !== 'undefined';\n\t\tthis.node = !this.browser;\n\n\t\tconst defaultOptions = {\n\t\t\ttimeout: 3000,\n\t\t};\n\n\t\tif (this.node) {\n\t\t\tconst nodeOptions = {\n\t\t\t\thttpAgent: new http.Agent({ keepAlive: 3000 }),\n\t\t\t\thttpsAgent: new https.Agent({ keepAlive: 3000 }),\n\t\t\t};\n\t\t\tthis.options = { ...nodeOptions, ...defaultOptions, ...options };\n\t\t} else {\n\t\t\tthis.options = { ...defaultOptions, ...options };\n\t\t\tdelete this.options.httpAgent;\n\t\t\tdelete this.options.httpsAgent;\n\t\t}\n\n\t\tthis.setBaseURL('https://chat-us-east-1.stream-io-api.com');\n\n\t\tif (typeof process !== 'undefined' && process.env.STREAM_LOCAL_TEST_RUN) {\n\t\t\tthis.setBaseURL('http://localhost:3030');\n\t\t}\n\n\t\t// WS connection is initialized when setUser is called\n\t\tthis.wsConnection = null;\n\t\tthis.wsPromise = null;\n\t\t// keeps a reference to all the channels that are in use\n\t\tthis.activeChannels = {};\n\t\t// mapping between channel groups and configs\n\t\tthis.configs = {};\n\t\tthis.anonymous = false;\n\n\t\t/**\n\t\t * logger function should accept 3 parameters:\n\t\t * @param logLevel string\n\t\t * @param message   string\n\t\t * @param extraData object\n\t\t *\n\t\t * e.g.,\n\t\t * const client = new StreamChat('api_key', {}, {\n\t\t * \t\tlogger = (logLevel, message, extraData) => {\n\t\t * \t\t\tconsole.log(message);\n\t\t * \t\t}\n\t\t * })\n\t\t *\n\t\t * extraData contains tags array attached to log message. Tags can have one/many of following values:\n\t\t * 1. api\n\t\t * 2. api_request\n\t\t * 3. api_response\n\t\t * 4. client\n\t\t * 5. channel\n\t\t * 6. connection\n\t\t * 7. event\n\t\t *\n\t\t * It may also contains some extra data, some examples have been mentioned below:\n\t\t * 1. {\n\t\t * \t\ttags: ['api', 'api_request', 'client'],\n\t\t * \t\turl: string,\n\t\t * \t\tpayload: object,\n\t\t * \t\tconfig: object\n\t\t * }\n\t\t * 2. {\n\t\t * \t\ttags: ['api', 'api_response', 'client'],\n\t\t * \t\turl: string,\n\t\t * \t\tresponse: object\n\t\t * }\n\t\t * 3. {\n\t\t * \t\ttags: ['api', 'api_response', 'client'],\n\t\t * \t\turl: string,\n\t\t * \t\terror: object\n\t\t * }\n\t\t * 4. {\n\t\t * \t\ttags: ['event', 'client'],\n\t\t * \t\tevent: object\n\t\t * }\n\t\t * 5. {\n\t\t * \t\ttags: ['channel'],\n\t\t * \t\tchannel: object\n\t\t * }\n\t\t */\n\t\tthis.logger = isFunction(options.logger) ? options.logger : () => {};\n\t}\n\n\tdevToken(userID) {\n\t\treturn DevToken(userID);\n\t}\n\n\tgetAuthType() {\n\t\treturn this.anonymous ? 'anonymous' : 'jwt';\n\t}\n\n\tsetBaseURL(baseURL) {\n\t\tthis.baseURL = baseURL;\n\t\tthis.wsBaseURL = this.baseURL.replace('http', 'ws');\n\t}\n\n\t_setupConnection() {\n\t\tthis.UUID = uuidv4();\n\t\tthis.clientID = `${this.userID}--${this.UUID}`;\n\t\tthis.wsPromise = this.connect();\n\t\tthis._startCleaning();\n\t\treturn this.wsPromise;\n\t}\n\n\t_hasConnectionID = () => Boolean(this.connectionID);\n\n\t/**\n\t * setUser - Set the current user, this triggers a connection to the API\n\t *\n\t * @param {object} user Data about this user. IE {name: \"john\"}\n\t * @param {string} userToken   Token\n\t *\n\t * @return {promise} Returns a promise that resolves when the connection is setup\n\t */\n\tsetUser(user, userToken) {\n\t\tif (this.userID) {\n\t\t\tthrow new Error(\n\t\t\t\t'Use client.disconnect() before trying to connect as a different user. setUser was called twice.',\n\t\t\t);\n\t\t}\n\t\t// we generate the client id client side\n\t\tthis.userID = user.id;\n\n\t\tif (!this.userID) {\n\t\t\tthrow new Error('The \"id\" field on the user is missing');\n\t\t}\n\n\t\tthis.userToken = userToken;\n\n\t\tif (userToken == null && this.secret != null) {\n\t\t\tthis.userToken = this.createToken(this.userID);\n\t\t}\n\n\t\tif (this.userToken == null) {\n\t\t\tthrow new Error('both userToken and api secret are not provided');\n\t\t}\n\n\t\tconst tokenUserId = UserFromToken(this.userToken);\n\t\tif (\n\t\t\tuserToken != null &&\n\t\t\t(tokenUserId == null || tokenUserId === '' || tokenUserId !== user.id)\n\t\t) {\n\t\t\tthrow new Error(\n\t\t\t\t'userToken does not have a user_id or is not matching with user.id',\n\t\t\t);\n\t\t}\n\t\tthis._setUser(user);\n\t\tthis.anonymous = false;\n\n\t\treturn this._setupConnection();\n\t}\n\n\t_setUser(user) {\n\t\t// this one is used by the frontend\n\t\tthis.user = user;\n\t\t// this one is actually used for requests...\n\t\tthis._user = { ...user };\n\t}\n\n\t/**\n\t * updateAppSettings - updates application settings\n\t *\n\t * @param {object} options App settings.\n\t * \t\tIE: {\n\t  \t\t\t\"apn_config\": {\n\t\t\t\t\t\"auth_type\": \"token\",\n\t\t\t\t\t\"auth_key\": fs.readFileSync(\n\t\t\t\t\t\t'./apn-push-auth-key.p8',\n\t\t\t\t\t\t'utf-8',\n\t\t\t\t\t),\n\t\t\t\t\t\"key_id\": \"keyid\",\n\t\t\t\t\t\"team_id\": \"teamid\", //either ALL these 3\n\t\t\t\t\t\"notification_template\": \"notification handlebars template\",\n\t\t\t\t\t\"bundle_id\": \"com.apple.your.app\",\n\t\t\t\t\t\"development\": true\n\t\t\t\t},\n\t\t\t\t\"firebase_config\": {\n\t\t\t\t\t\"server_key\": \"server key from fcm\",\n\t\t\t\t\t\"notification_template\": \"notification handlebars template\"\n\t\t\t\t\t\"data_template\": \"data handlebars template\"\n\t\t\t\t},\n\t\t\t\t\"webhook_url\": \"https://acme.com/my/awesome/webhook/\"\n\t\t\t}\n\t */\n\tasync updateAppSettings(options) {\n\t\tif (options.apn_config && options.apn_config.p12_cert) {\n\t\t\toptions.apn_config.p12_cert = Buffer.from(\n\t\t\t\toptions.apn_config.p12_cert,\n\t\t\t).toString('base64');\n\t\t}\n\t\treturn await this.patch(this.baseURL + '/app', options);\n\t}\n\n\t/**\n\t * getAppSettings - retrieves application settings\n\t */\n\tasync getAppSettings() {\n\t\treturn await this.get(this.baseURL + '/app');\n\t}\n\n\t/**\n\t * testPushSettings - Tests the push settings for a user with a random chat message and the configured push templates\n\t *\n\t * @param {string} userID User ID. If user has no devices, it will error\n\t * @param {object} [data] Overrides for push templates/message used\n\t * \t\tIE: {\n\t\t\t\t  messageID: 'id-of-message',//will error if message does not exist\n\t\t\t\t  apnTemplate: '{}', //if app doesn't have apn configured it will error\n\t\t\t\t  firebaseTemplate: '{}', //if app doesn't have firebase configured it will error\n\t\t\t\t  firebaseDataTemplate: '{}', //if app doesn't have firebase configured it will error\n\t\t\t}\n\t */\n\tasync testPushSettings(userID, data = {}) {\n\t\treturn await this.post(this.baseURL + '/check_push', {\n\t\t\tuser_id: userID,\n\t\t\t...(data.messageID ? { message_id: data.messageID } : {}),\n\t\t\t...(data.apnTemplate ? { apn_template: data.apnTemplate } : {}),\n\t\t\t...(data.firebaseTemplate\n\t\t\t\t? { firebase_template: data.firebaseTemplate }\n\t\t\t\t: {}),\n\t\t\t...(data.firebaseDataTemplate\n\t\t\t\t? { firebase_data_template: data.firebaseDataTemplate }\n\t\t\t\t: {}),\n\t\t});\n\t}\n\n\t/**\n\t * disconnect - closes the WS connection\n\t */\n\tdisconnect() {\n\t\tthis.logger('info', 'client:disconnect() - Disconnecting the client', {\n\t\t\ttags: ['connection', 'client'],\n\t\t});\n\t\t// remove the user specific fields\n\t\tdelete this.user;\n\t\tdelete this._user;\n\t\tdelete this.userID;\n\n\t\tif (this.cleaningIntervalRef != null) {\n\t\t\tclearInterval(this.cleaningIntervalRef);\n\t\t\tthis.cleaningIntervalRef = null;\n\t\t}\n\n\t\tthis.anonymous = false;\n\t\tthis.userToken = null;\n\n\t\tthis.connectionEstablishedCount = 0;\n\n\t\tfor (const channel of Object.values(this.activeChannels)) {\n\t\t\tchannel._disconnect();\n\t\t}\n\t\t// ensure we no longer return inactive channels\n\t\tthis.activeChannels = {};\n\t\t// reset client state\n\t\tthis.state = new ClientState();\n\n\t\t// close the WS connection\n\t\tif (this.wsConnection) {\n\t\t\treturn this.wsConnection.disconnect();\n\t\t}\n\t}\n\n\tsetAnonymousUser() {\n\t\tthis.anonymous = true;\n\t\tthis.userID = uuidv4();\n\t\tthis._setUser({\n\t\t\tid: this.userID,\n\t\t\tanon: true,\n\t\t});\n\t\treturn this._setupConnection();\n\t}\n\n\t/**\n\t * setGuestUser - Setup a temporary guest user\n\t *\n\t * @param {object} user Data about this user. IE {name: \"john\"}\n\t *\n\t * @return {promise} Returns a promise that resolves when the connection is setup\n\t */\n\tasync setGuestUser(user) {\n\t\tlet response;\n\t\tthis.anonymous = true;\n\t\ttry {\n\t\t\tresponse = await this.post(this.baseURL + '/guest', { user });\n\t\t} catch (e) {\n\t\t\tthis.anonymous = false;\n\t\t\tthrow e;\n\t\t}\n\t\tthis.anonymous = false;\n\t\tconst {\n\t\t\tcreated_at,\n\t\t\tupdated_at,\n\t\t\tlast_active,\n\t\t\tonline,\n\t\t\t...guestUser\n\t\t} = response.user;\n\t\treturn await this.setUser(guestUser, response.access_token);\n\t}\n\n\t/**\n\t * createToken - Creates a token to authenticate this user. This function is used server side.\n\t * The resulting token should be passed to the client side when the users registers or logs in\n\t *\n\t * @param {string}   userID         The User ID\n\t * @param {string}   exp            The expiration time for the token expressed in the number of seconds since the epoch\n\t *\n\t * @return {string} Returns a token\n\t */\n\tcreateToken(userID, exp) {\n\t\tconst extra = {};\n\t\tif (exp != null) {\n\t\t\textra.exp = exp;\n\t\t}\n\t\treturn JWTUserToken(this.secret, userID, extra, {});\n\t}\n\n\t/**\n\t * on - Listen to events on all channels and users your watching\n\t *\n\t * client.on('message.new', event => {console.log(\"my new message\", event, channel.state.messages)})\n\t * or\n\t * client.on(event => {console.log(event.type)})\n\t *\n\t * @param {string} callbackOrString  The event type to listen for (optional)\n\t * @param {function} callbackOrNothing The callback to call\n\t *\n\t * @return {type} Description\n\t */\n\ton(callbackOrString, callbackOrNothing) {\n\t\tconst key = callbackOrNothing ? callbackOrString : 'all';\n\t\tconst valid = isValidEventType(key);\n\t\tif (!valid) {\n\t\t\tthrow Error(`Invalid event type ${key}`);\n\t\t}\n\t\tconst callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n\t\tif (!(key in this.listeners)) {\n\t\t\tthis.listeners[key] = [];\n\t\t}\n\t\tthis.logger('info', `Attaching listener for ${key} event`, {\n\t\t\ttags: ['event', 'client'],\n\t\t});\n\t\tthis.listeners[key].push(callback);\n\t\treturn {\n\t\t\tunsubscribe: () => {\n\t\t\t\tthis.listeners[key] = this.listeners[key].filter(el => el !== callback);\n\t\t\t},\n\t\t};\n\t}\n\n\t/**\n\t * off - Remove the event handler\n\t *\n\t */\n\toff(callbackOrString, callbackOrNothing) {\n\t\tconst key = callbackOrNothing ? callbackOrString : 'all';\n\t\tconst valid = isValidEventType(key);\n\t\tif (!valid) {\n\t\t\tthrow Error(`Invalid event type ${key}`);\n\t\t}\n\t\tconst callback = callbackOrNothing ? callbackOrNothing : callbackOrString;\n\t\tif (!(key in this.listeners)) {\n\t\t\tthis.listeners[key] = [];\n\t\t}\n\n\t\tthis.logger('info', `Removing listener for ${key} event`, {\n\t\t\ttags: ['event', 'client'],\n\t\t});\n\t\tthis.listeners[key] = this.listeners[key].filter(value => value !== callback);\n\t}\n\n\t_logApiRequest(type, url, data, config) {\n\t\tthis.logger('info', `client: ${type} - Request - ${url}`, {\n\t\t\ttags: ['api', 'api_request', 'client'],\n\t\t\turl,\n\t\t\tpayload: data,\n\t\t\tconfig,\n\t\t});\n\t}\n\n\t_logApiResponse(type, url, response) {\n\t\tthis.logger(\n\t\t\t'info',\n\t\t\t`client:${type} - Response - url: ${url} > status ${response.status}`,\n\t\t\t{\n\t\t\t\ttags: ['api', 'api_response', 'client'],\n\t\t\t\turl,\n\t\t\t\tresponse,\n\t\t\t},\n\t\t);\n\t}\n\n\t_logApiError(type, url, error) {\n\t\tthis.logger('error', `client:${type} - Error - url: ${url}`, {\n\t\t\ttags: ['api', 'api_response', 'client'],\n\t\t\turl,\n\t\t\terror,\n\t\t});\n\t}\n\n\tasync get(url, params) {\n\t\ttry {\n\t\t\tthis._logApiRequest('get', url, {}, this._addClientParams(params));\n\t\t\tconst response = await axios.get(url, this._addClientParams(params));\n\t\t\tthis._logApiResponse('get', url, response);\n\n\t\t\treturn this.handleResponse(response);\n\t\t} catch (e) {\n\t\t\tthis._logApiError('get', url, e);\n\t\t\tif (e.response) {\n\t\t\t\treturn this.handleResponse(e.response);\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync put(url, data) {\n\t\tlet response;\n\t\ttry {\n\t\t\tthis._logApiRequest('put', url, data, this._addClientParams());\n\t\t\tresponse = await axios.put(url, data, this._addClientParams());\n\t\t\tthis._logApiResponse('put', url, response);\n\n\t\t\treturn this.handleResponse(response);\n\t\t} catch (e) {\n\t\t\tthis._logApiError('get', url, e);\n\t\t\tif (e.response) {\n\t\t\t\treturn this.handleResponse(e.response);\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync post(url, data) {\n\t\tlet response;\n\t\ttry {\n\t\t\tthis._logApiRequest('post', url, data, this._addClientParams());\n\t\t\tresponse = await axios.post(url, data, this._addClientParams());\n\t\t\tthis._logApiResponse('post', url, response);\n\n\t\t\treturn this.handleResponse(response);\n\t\t} catch (e) {\n\t\t\tthis._logApiError('post', url, e);\n\t\t\tif (e.response) {\n\t\t\t\treturn this.handleResponse(e.response);\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync patch(url, data) {\n\t\tlet response;\n\t\ttry {\n\t\t\tthis._logApiRequest('patch', url, data, this._addClientParams());\n\t\t\tresponse = await axios.patch(url, data, this._addClientParams());\n\t\t\tthis._logApiResponse('patch', url, response);\n\n\t\t\treturn this.handleResponse(response);\n\t\t} catch (e) {\n\t\t\tthis._logApiError('patch', url, e);\n\t\t\tif (e.response) {\n\t\t\t\treturn this.handleResponse(e.response);\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync delete(url, params) {\n\t\tlet response;\n\t\ttry {\n\t\t\tthis._logApiRequest('delete', url, {}, this._addClientParams());\n\t\t\tresponse = await axios.delete(url, this._addClientParams(params));\n\t\t\tthis._logApiResponse('delete', url, response);\n\n\t\t\treturn this.handleResponse(response);\n\t\t} catch (e) {\n\t\t\tthis._logApiError('delete', url, e);\n\t\t\tif (e.response) {\n\t\t\t\treturn this.handleResponse(e.response);\n\t\t\t} else {\n\t\t\t\tthrow e;\n\t\t\t}\n\t\t}\n\t}\n\n\tasync sendFile(url, uri, name, contentType, user) {\n\t\tconst data = new FormData();\n\t\tlet fileField;\n\n\t\tconst params = this._addClientParams();\n\t\tif (isReadableStream(uri) || uri instanceof File) {\n\t\t\tfileField = uri;\n\t\t} else {\n\t\t\tfileField = {\n\t\t\t\turi,\n\t\t\t\tname: name || uri.split('/').reverse()[0],\n\t\t\t};\n\t\t\tif (contentType != null) {\n\t\t\t\tfileField.type = contentType;\n\t\t\t}\n\t\t}\n\n\t\tif (user != null) {\n\t\t\tdata.append('user', JSON.stringify(user));\n\t\t}\n\t\tdata.append('file', fileField);\n\t\tconst response = await fetch(`${url}?api_key=${this.key}`, {\n\t\t\tmethod: 'post',\n\t\t\tbody: data,\n\t\t\theaders: new Headers({\n\t\t\t\tAuthorization: params.headers.Authorization,\n\t\t\t\t'stream-auth-type': this.getAuthType(),\n\t\t\t}),\n\t\t});\n\t\tresponse.data = await response.json();\n\t\treturn this.handleResponse(response);\n\t}\n\n\terrorFromResponse(response) {\n\t\tlet err;\n\t\terr = new Error(`StreamChat error HTTP code: ${response.status}`);\n\t\tif (response.data && response.data.code) {\n\t\t\terr = new Error(\n\t\t\t\t`StreamChat error code ${response.data.code}: ${response.data.message}`,\n\t\t\t);\n\t\t\terr.code = response.data.code;\n\t\t}\n\t\terr.response = response;\n\t\terr.status = response.status;\n\t\treturn err;\n\t}\n\n\thandleResponse(response) {\n\t\tconst data = response.data;\n\t\tif ((response.status + '')[0] !== '2') {\n\t\t\tthrow this.errorFromResponse(response);\n\t\t}\n\t\treturn data;\n\t}\n\n\tdispatchEvent = event => {\n\t\t// client event handlers\n\t\tthis._handleClientEvent(event);\n\n\t\t// channel event handlers\n\t\tconst cid = event.cid;\n\t\tconst channel = this.activeChannels[cid];\n\t\tif (channel) {\n\t\t\tchannel._handleChannelEvent(event);\n\t\t}\n\n\t\tthis._callClientListeners(event);\n\n\t\tif (channel) {\n\t\t\tchannel._callChannelListeners(event);\n\t\t}\n\t};\n\n\thandleEvent = messageEvent => {\n\t\t// dispatch the event to the channel listeners\n\t\tconst jsonString = messageEvent.data;\n\t\tconst event = JSON.parse(jsonString);\n\t\tevent.received_at = new Date();\n\t\tthis.dispatchEvent(event);\n\t};\n\n\t_handleClientEvent(event) {\n\t\tconst client = this;\n\t\tthis.logger(\n\t\t\t'info',\n\t\t\t`client:_handleClientEvent - Received event of type { ${event.type} }`,\n\t\t\t{\n\t\t\t\ttags: ['event', 'client'],\n\t\t\t\tevent,\n\t\t\t},\n\t\t);\n\n\t\t// update the client.state with any changes to users\n\t\tif (event.type === 'user.presence.changed' || event.type === 'user.updated') {\n\t\t\tif (event.user.id === this.userID) {\n\t\t\t\tthis.user = { ...this.user, ...event.user };\n\t\t\t\t// Updating only available properties in _user object.\n\t\t\t\tObject.keys(event.user).forEach(function(key) {\n\t\t\t\t\tif (key in client._user) {\n\t\t\t\t\t\tclient._user[key] = event.user[key];\n\t\t\t\t\t}\n\t\t\t\t});\n\t\t\t}\n\t\t\tclient.state.updateUser(event.user);\n\t\t\tclient._updateUserReferences(event.user);\n\t\t}\n\t\tif (event.type === 'health.check' && event.me) {\n\t\t\tclient.user = event.me;\n\t\t\tclient.state.updateUser(event.me);\n\t\t}\n\n\t\tif (event.type === 'notification.message_new') {\n\t\t\tthis.configs[event.channel.type] = event.channel.config;\n\t\t}\n\t}\n\n\t_callClientListeners = event => {\n\t\tconst client = this;\n\t\t// gather and call the listeners\n\t\tconst listeners = [];\n\t\tif (client.listeners.all) {\n\t\t\tlisteners.push(...client.listeners.all);\n\t\t}\n\t\tif (client.listeners[event.type]) {\n\t\t\tlisteners.push(...client.listeners[event.type]);\n\t\t}\n\n\t\t// call the event and send it to the listeners\n\t\tfor (const listener of listeners) {\n\t\t\tlistener(event);\n\t\t}\n\t};\n\n\trecoverState = async () => {\n\t\tthis.logger(\n\t\t\t'info',\n\t\t\t`client:recoverState() - Start of recoverState with connectionID ${this.wsConnection.connectionID}`,\n\t\t\t{\n\t\t\t\ttags: ['connection'],\n\t\t\t},\n\t\t);\n\t\tthis.connectionID = this.wsConnection.connectionID;\n\t\tconst cids = Object.keys(this.activeChannels || {});\n\t\tconst lastMessageIDs = {};\n\t\tfor (const c of Object.values(this.activeChannels)) {\n\t\t\tconst lastMessage = c.lastMessage();\n\t\t\tlet lastMessageId;\n\t\t\tif (lastMessage) {\n\t\t\t\tlastMessageId = lastMessage.id;\n\t\t\t}\n\t\t\tlastMessageIDs[c.cid] = lastMessageId;\n\t\t}\n\t\tif (cids.length) {\n\t\t\tthis.logger(\n\t\t\t\t'info',\n\t\t\t\t`client:recoverState() - Start the querying of ${cids.length} channels`,\n\t\t\t\t{ tags: ['connection', 'client'] },\n\t\t\t);\n\n\t\t\tawait this.queryChannels(\n\t\t\t\t{ cid: { $in: cids } },\n\t\t\t\t{ last_message_at: -1 },\n\t\t\t\t{ limit: 30, recovery: true, last_message_ids: lastMessageIDs },\n\t\t\t);\n\n\t\t\tthis.logger('info', 'client:recoverState() - Querying channels finished', {\n\t\t\t\ttags: ['connection', 'client'],\n\t\t\t});\n\n\t\t\tthis.dispatchEvent({\n\t\t\t\ttype: 'connection.recovered',\n\t\t\t});\n\t\t}\n\t};\n\n\t/*\n\t_updateUserReferences updates the members and watchers of the currently active channels\n\tthat contain this user\n\t*/\n\t_updateUserReferences(user) {\n\t\tconst refMap = this.state.userChannelReferences[user.id] || {};\n\t\tconst refs = Object.keys(refMap);\n\t\tfor (const channelID of refs) {\n\t\t\tconst c = this.activeChannels[channelID];\n\t\t\t// search the members and watchers and update as needed...\n\t\t\tif (c && c.state) {\n\t\t\t\tif (c.state.members[user.id]) {\n\t\t\t\t\tc.state.members = c.state.members.setIn([user.id, 'user'], user);\n\t\t\t\t}\n\t\t\t\tif (c.state.watchers[user.id]) {\n\t\t\t\t\tc.state.watchers = c.state.watchers.setIn([user.id, 'user'], user);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t}\n\n\tasync connect() {\n\t\tthis.connecting = true;\n\t\tconst client = this;\n\t\tthis.failures = 0;\n\n\t\tif (client.userID == null) {\n\t\t\tthrow Error(\n\t\t\t\t'Call setUser or setAnonymousUser before starting the connection',\n\t\t\t);\n\t\t}\n\t\tconst params = {\n\t\t\tclient_id: client.client_id,\n\t\t\tuser_id: client.userID,\n\t\t\tuser_details: client._user,\n\t\t\tuser_token: client.userToken,\n\t\t\tserver_determines_connection_id: true,\n\t\t};\n\t\tconst qs = encodeURIComponent(JSON.stringify(params));\n\t\tif (qs.length > 1900) {\n\t\t\tthrow Error('User object is too large');\n\t\t}\n\n\t\tconst token = this._getToken();\n\n\t\tconst authType = this.getAuthType();\n\t\tclient.wsURL = `${client.wsBaseURL}/connect?json=${qs}&api_key=${\n\t\t\tthis.key\n\t\t}&authorization=${token}&stream-auth-type=${authType}&x-stream-client=${this._userAgent()}`;\n\n\t\t// The StableWSConnection handles all the reconnection logic.\n\t\tthis.wsConnection = new StableWSConnection({\n\t\t\twsURL: client.wsURL,\n\t\t\tclientID: this.clientID,\n\t\t\tuserID: this.userID,\n\t\t\trecoverCallback: this.recoverState,\n\t\t\tmessageCallback: this.handleEvent,\n\t\t\teventCallback: this.dispatchEvent,\n\t\t\tlogger: this.logger,\n\t\t});\n\n\t\tconst handshake = await this.wsConnection.connect();\n\t\tthis.connectionID = this.wsConnection.connectionID;\n\t\treturn handshake;\n\t}\n\n\t/**\n\t * queryUsers - Query users and watch user presence\n\t *\n\t * @param {object} filterConditions MongoDB style filter conditions\n\t * @param {object} sort             Sort options, for instance {last_active: -1}\n\t * @param {object} options          Option object, {presence: true}\n\t *\n\t * @return {object} User Query Response\n\t */\n\tasync queryUsers(filterConditions, sort, options) {\n\t\tif (!sort) {\n\t\t\tsort = {};\n\t\t}\n\t\tif (!options) {\n\t\t\toptions = {};\n\t\t}\n\t\tconst sortFields = [];\n\t\tfor (const [k, v] of Object.entries(sort)) {\n\t\t\tsortFields.push({ field: k, direction: v });\n\t\t}\n\n\t\tconst defaultOptions = {\n\t\t\tpresence: true,\n\t\t};\n\n\t\t// Make sure we wait for the connect promise if there is a pending one\n\t\tawait this.wsPromise;\n\n\t\tif (!this._hasConnectionID()) {\n\t\t\tdefaultOptions.presence = false;\n\t\t}\n\n\t\t// Return a list of users\n\t\tconst data = await this.get(this.baseURL + '/users', {\n\t\t\tpayload: {\n\t\t\t\tfilter_conditions: filterConditions,\n\t\t\t\tsort: sortFields,\n\t\t\t\t...defaultOptions,\n\t\t\t\t...options,\n\t\t\t},\n\t\t});\n\n\t\tthis.state.updateUsers(data.users);\n\n\t\treturn data;\n\t}\n\n\tasync queryChannels(filterConditions, sort = {}, options = {}) {\n\t\tconst sortFields = [];\n\n\t\tfor (const [k, v] of Object.entries(sort)) {\n\t\t\tsortFields.push({ field: k, direction: v });\n\t\t}\n\n\t\tconst defaultOptions = {\n\t\t\tstate: true,\n\t\t\twatch: true,\n\t\t\tpresence: false,\n\t\t};\n\n\t\t// Make sure we wait for the connect promise if there is a pending one\n\t\tawait this.wsPromise;\n\n\t\tif (!this._hasConnectionID()) {\n\t\t\tdefaultOptions.watch = false;\n\t\t}\n\n\t\t// Return a list of channels\n\t\tconst payload = {\n\t\t\tfilter_conditions: filterConditions,\n\t\t\tsort: sortFields,\n\t\t\tuser_details: this._user,\n\t\t\t...defaultOptions,\n\t\t\t...options,\n\t\t};\n\n\t\tconst data = await this.get(this.baseURL + '/channels', {\n\t\t\tpayload,\n\t\t});\n\n\t\tconst channels = [];\n\n\t\t// update our cache of the configs\n\t\tfor (const channelState of data.channels) {\n\t\t\tthis._addChannelConfig(channelState);\n\t\t}\n\n\t\tfor (const channelState of data.channels) {\n\t\t\tconst c = this.channel(channelState.channel.type, channelState.channel.id);\n\t\t\tc.data = channelState.channel;\n\t\t\tc.initialized = true;\n\t\t\tc._initializeState(channelState);\n\t\t\tchannels.push(c);\n\t\t}\n\t\treturn channels;\n\t}\n\n\tasync search(filterConditions, query, options = {}) {\n\t\t// Return a list of channels\n\t\tconst payload = {\n\t\t\tfilter_conditions: filterConditions,\n\t\t\tquery,\n\t\t\t...options,\n\t\t};\n\n\t\t// Make sure we wait for the connect promise if there is a pending one\n\t\tawait this.wsPromise;\n\n\t\treturn await this.get(this.baseURL + '/search', {\n\t\t\tpayload,\n\t\t});\n\t}\n\n\t/**\n\t * addDevice - Adds a push device for a user.\n\t *\n\t * @param {string} id the device id\n\t * @param {string} push_provider the push provider (apn or firebase)\n\t * @param {string} [userID] the user id (defaults to current user)\n\t *\n\t */\n\tasync addDevice(id, push_provider, userID = null) {\n\t\treturn await this.post(this.baseURL + '/devices', {\n\t\t\tid,\n\t\t\tpush_provider,\n\t\t\t...(userID != null ? { user_id: userID } : {}),\n\t\t});\n\t}\n\n\t/**\n\t * getDevices - Returns the devices associated with a current user\n\t *\n\t * @param {string} [userID] User ID. Only works on serversidex\n\t *\n\t * @return {devices} Array of devices\n\t */\n\tasync getDevices(userID) {\n\t\treturn await this.get(\n\t\t\tthis.baseURL + '/devices',\n\t\t\tuserID ? { user_id: userID } : {},\n\t\t);\n\t}\n\n\t/**\n\t * removeDevice - Removes the device with the given id. Clientside users can only delete their own devices\n\t *\n\t * @param {string} id The device id\n\t * @param {string} [userID] The user id. Only specify this for serverside requests\n\t *\n\t */\n\tasync removeDevice(id, userID = null) {\n\t\treturn await this.delete(this.baseURL + '/devices', {\n\t\t\tid,\n\t\t\t...(userID ? { user_id: userID } : {}),\n\t\t});\n\t}\n\n\t_addChannelConfig(channelState) {\n\t\tthis.configs[channelState.channel.type] = channelState.channel.config;\n\t}\n\n\t/**\n\t * channel - Returns a new channel with the given type, id and custom data\n\t *\n\t * If you want to create a unique conversation between 2 or more users; you can leave out the ID parameter\n\t * and only provide ID and the list of members\n\t *\n\t * ie. client.channel(\"messaging\", {members: [\"tommaso\", \"thierry\"]})\n\t *\n\t * @param {string} channelType The channel type\n\t * @param {string} channelID   The channel ID, you can leave this out if you want to create a conversation channel\n\t * @param {object} [custom]    Custom data to attach to the channel\n\t *\n\t * @return {channel} The channel object, initialize it using channel.watch()\n\t */\n\tchannel(channelType, channelID, custom = {}) {\n\t\tif (!this.userID && !this._isUsingServerAuth()) {\n\t\t\tthrow Error('Call setUser or setAnonymousUser before creating a channel');\n\t\t}\n\n\t\tif (~channelType.indexOf(':')) {\n\t\t\tthrow Error(\n\t\t\t\t`Invalid channel group ${channelType}, can't contain the : character`,\n\t\t\t);\n\t\t}\n\n\t\t// support channel(\"messaging\", null, {options})\n\t\t// support channel(\"messaging\", undefined, {options})\n\t\t// support channel(\"messaging\", \"\", {options})\n\t\tif (channelID == null || channelID === '') {\n\t\t\treturn new Channel(this, channelType, undefined, custom || {});\n\t\t}\n\n\t\t// support channel(\"messaging\", {options})\n\t\tif (typeof channelID === 'object' && arguments.length === 2) {\n\t\t\treturn new Channel(this, channelType, undefined, channelID || {});\n\t\t}\n\n\t\tif (typeof channelID === 'string' && ~channelID.indexOf(':')) {\n\t\t\tthrow Error(`Invalid channel id ${channelID}, can't contain the : character`);\n\t\t}\n\n\t\t// only allow 1 channel object per cid\n\t\tconst cid = `${channelType}:${channelID}`;\n\t\tif (cid in this.activeChannels) {\n\t\t\tconst channel = this.activeChannels[cid];\n\t\t\tif (Object.keys(custom).length > 0) {\n\t\t\t\tchannel.data = custom;\n\t\t\t\tchannel._data = custom;\n\t\t\t}\n\t\t\treturn channel;\n\t\t}\n\t\tconst channel = new Channel(this, channelType, channelID, custom);\n\t\tthis.activeChannels[channel.cid] = channel;\n\n\t\treturn channel;\n\t}\n\n\t/**\n\t * updateUser - Update or Create the given user object\n\t *\n\t * @param {object} A user object, the only required field is the user id. IE {id: \"myuser\"} is valid\n\t *\n\t * @return {object}\n\t */\n\tasync updateUser(userObject) {\n\t\treturn await this.updateUsers([userObject]);\n\t}\n\n\t/**\n\t * partialUpdateUser - Update the given user object\n\t *\n\t * @param {object} Object which should contain id and any of \"set\" or \"unset\" params;\n\t * example: {id: \"user1\", set:{field: value}, unset:[\"field2\"]}\n\t *\n\t * @return {object} list of updated users\n\t */\n\tasync partialUpdateUser(userObject) {\n\t\treturn await this.partialUpdateUsers([userObject]);\n\t}\n\n\t/**\n\t * updateUsers - Batch update the list of users\n\t *\n\t * @param {array} A list of users\n\t *\n\t * @return {object}\n\t */\n\tasync updateUsers(users) {\n\t\tconst userMap = {};\n\t\tfor (const userObject of users) {\n\t\t\tif (!userObject.id) {\n\t\t\t\tthrow Error('User ID is required when updating a user');\n\t\t\t}\n\t\t\tuserMap[userObject.id] = userObject;\n\t\t}\n\n\t\treturn await this.post(this.baseURL + '/users', {\n\t\t\tusers: userMap,\n\t\t});\n\t}\n\n\t/**\n\t * updateUsers - Batch partial update of users\n\t *\n\t * @param {array} A list of partial update requests\n\t *\n\t * @return {object}\n\t */\n\tasync partialUpdateUsers(users) {\n\t\tfor (const userObject of users) {\n\t\t\tif (!userObject.id) {\n\t\t\t\tthrow Error('User ID is required when updating a user');\n\t\t\t}\n\t\t}\n\n\t\treturn await this.patch(this.baseURL + '/users', {\n\t\t\tusers,\n\t\t});\n\t}\n\n\tasync deleteUser(userID, params) {\n\t\treturn await this.delete(this.baseURL + `/users/${userID}`, params);\n\t}\n\n\tasync reactivateUser(userID, options) {\n\t\treturn await this.post(this.baseURL + `/users/${userID}/reactivate`, {\n\t\t\t...options,\n\t\t});\n\t}\n\n\tasync deactivateUser(userID, options) {\n\t\treturn await this.post(this.baseURL + `/users/${userID}/deactivate`, {\n\t\t\t...options,\n\t\t});\n\t}\n\n\tasync exportUser(userID, options) {\n\t\treturn await this.get(this.baseURL + `/users/${userID}/export`, {\n\t\t\t...options,\n\t\t});\n\t}\n\n\t/** banUser - bans a user from all channels\n\t *\n\t * @param targetUserID\n\t * @param options\n\t * @returns {Promise<*>}\n\t */\n\tasync banUser(targetUserID, options) {\n\t\treturn await this.post(this.baseURL + '/moderation/ban', {\n\t\t\ttarget_user_id: targetUserID,\n\t\t\t...options,\n\t\t});\n\t}\n\n\t/** unbanUser - revoke global ban for a user\n\t *\n\t * @param targetUserID\n\t * @returns {Promise<*>}\n\t */\n\tasync unbanUser(targetUserID, options) {\n\t\treturn await this.delete(this.baseURL + '/moderation/ban', {\n\t\t\ttarget_user_id: targetUserID,\n\t\t\t...options,\n\t\t});\n\t}\n\n\t/** muteUser - mutes a user\n\t *\n\t * @param targetID\n\t * @param [userID] Only used with serverside auth\n\t * @returns {Promise<*>}\n\t */\n\tasync muteUser(targetID, userID = null) {\n\t\treturn await this.post(this.baseURL + '/moderation/mute', {\n\t\t\ttarget_id: targetID,\n\t\t\t...(userID ? { user_id: userID } : {}),\n\t\t});\n\t}\n\n\t/** unmuteUser - unmutes a user\n\t *\n\t * @param targetID\n\t * @param [userID] Only used with serverside auth\n\t * @returns {Promise<*>}\n\t */\n\tasync unmuteUser(targetID, userID = null) {\n\t\treturn await this.post(this.baseURL + '/moderation/unmute', {\n\t\t\ttarget_id: targetID,\n\t\t\t...(userID ? { user_id: userID } : {}),\n\t\t});\n\t}\n\n\tasync flagMessage(messageID) {\n\t\treturn await this.post(this.baseURL + '/moderation/flag', {\n\t\t\ttarget_message_id: messageID,\n\t\t});\n\t}\n\n\tasync flagUser(userID) {\n\t\treturn await this.post(this.baseURL + '/moderation/flag', {\n\t\t\ttarget_user_id: userID,\n\t\t});\n\t}\n\n\tasync unflagMessage(messageID) {\n\t\treturn await this.post(this.baseURL + '/moderation/unflag', {\n\t\t\ttarget_message_id: messageID,\n\t\t});\n\t}\n\n\tasync unflagUser(userID) {\n\t\treturn await this.post(this.baseURL + '/moderation/unflag', {\n\t\t\ttarget_user_id: userID,\n\t\t});\n\t}\n\n\t/**\n\t * markAllRead - marks all channels for this user as read\n\t *\n\t * @return {Promise} Description\n\t */\n\tasync markAllRead(data = {}) {\n\t\tconst response = await this.post(this.baseURL + '/channels/read', {\n\t\t\t...data,\n\t\t});\n\t}\n\n\tcreateChannelType(data) {\n\t\tconst channelData = Object.assign({}, { commands: ['all'] }, data);\n\t\treturn this.post(this.baseURL + '/channeltypes', channelData);\n\t}\n\n\tgetChannelType(channelType) {\n\t\treturn this.get(this.baseURL + `/channeltypes/${channelType}`);\n\t}\n\n\tupdateChannelType(channelType, data) {\n\t\treturn this.put(this.baseURL + `/channeltypes/${channelType}`, data);\n\t}\n\n\tdeleteChannelType(channelType) {\n\t\treturn this.delete(this.baseURL + `/channeltypes/${channelType}`);\n\t}\n\n\tlistChannelTypes() {\n\t\treturn this.get(this.baseURL + `/channeltypes`);\n\t}\n\n\t/**\n\t * updateMessage - Update the given message\n\t *\n\t * @param {object} message object, id needs to be specified\n\t *\n\t * @return {object} Response that includes the message\n\t */\n\tasync updateMessage(message, userId) {\n\t\tif (!message.id) {\n\t\t\tthrow Error('Please specify the message id when calling updateMesssage');\n\t\t}\n\n\t\tconst clonedMessage = Object.assign({}, message);\n\t\tdelete clonedMessage.id;\n\n\t\tconst reservedMessageFields = [\n\t\t\t'latest_reactions',\n\t\t\t'own_reactions',\n\t\t\t'reply_count',\n\t\t\t'reaction_counts',\n\t\t\t'created_at',\n\t\t\t'updated_at',\n\t\t\t'html',\n\t\t\t'command',\n\t\t\t'type',\n\t\t\t'user',\n\t\t];\n\n\t\treservedMessageFields.forEach(function(item) {\n\t\t\tif (clonedMessage[item] != null) {\n\t\t\t\tdelete clonedMessage[item];\n\t\t\t}\n\t\t});\n\n\t\tif (userId != null) {\n\t\t\tif (typeof userId == 'string' || userId instanceof String) {\n\t\t\t\tclonedMessage.user_id = userId;\n\t\t\t} else {\n\t\t\t\tclonedMessage.user = { id: userId.id };\n\t\t\t}\n\t\t}\n\t\treturn await this.post(this.baseURL + `/messages/${message.id}`, {\n\t\t\tmessage: clonedMessage,\n\t\t});\n\t}\n\n\tasync deleteMessage(messageID, hardDelete) {\n\t\tlet params = {};\n\t\tif (hardDelete) {\n\t\t\tparams = { hard: true };\n\t\t}\n\t\treturn await this.delete(this.baseURL + `/messages/${messageID}`, params);\n\t}\n\n\tasync getMessage(messageID) {\n\t\treturn await this.get(this.baseURL + `/messages/${messageID}`);\n\t}\n\n\t_userAgent() {\n\t\treturn `stream-chat-javascript-client-${this.node ? 'node' : 'browser'}-${\n\t\t\tpkg.version\n\t\t}`;\n\t}\n\n\t/**\n\t * _isUsingServerAuth - Returns true if we're using server side auth\n\t */\n\t_isUsingServerAuth = () => !!this.secret;\n\n\t_addClientParams(params = {}) {\n\t\tconst token = this._getToken();\n\n\t\treturn {\n\t\t\t...this.options,\n\t\t\tparams: {\n\t\t\t\tuser_id: this.userID,\n\t\t\t\t...params,\n\t\t\t\tapi_key: this.key,\n\t\t\t\tconnection_id: this.connectionID,\n\t\t\t},\n\t\t\theaders: {\n\t\t\t\tAuthorization: token,\n\t\t\t\t'stream-auth-type': this.getAuthType(),\n\t\t\t\t'x-stream-client': this._userAgent(),\n\t\t\t},\n\t\t};\n\t}\n\n\t_getToken() {\n\t\tif (this.secret == null && this.userToken == null && !this.anonymous) {\n\t\t\tthrow new Error(\n\t\t\t\t`Both secret and user tokens are not set. Either client.setUser wasn't called or client.disconnect was called`,\n\t\t\t);\n\t\t}\n\t\tlet token = '';\n\t\tif (!this.anonymous) {\n\t\t\ttoken = this.userToken != null ? this.userToken : JWTServerToken(this.secret);\n\t\t}\n\t\treturn token;\n\t}\n\n\t_startCleaning() {\n\t\tconst that = this;\n\t\tif (this.cleaningIntervalRef != null) {\n\t\t\treturn;\n\t\t}\n\t\tthis.cleaningIntervalRef = setInterval(() => {\n\t\t\t// call clean on the channel, used for calling the stop.typing event etc.\n\t\t\tfor (const channel of Object.values(that.activeChannels)) {\n\t\t\t\tchannel.clean();\n\t\t\t}\n\t\t}, 500);\n\t}\n\n\tverifyWebhook(requestBody, xSignature) {\n\t\treturn CheckSignature(requestBody, this.secret, xSignature);\n\t}\n}\n"],"names":["byDate","a","b","created_at","ChannelState","channel","_channel","watcher_count","typing","Immutable","read","messages","threads","mutedUsers","watchers","members","last_message_at","Date","newMessage","addMessagesSorted","message","__html","html","updated_at","status","newMessages","initializing","parsedMessages","id","without","parsedMsg","messageToImmutable","push","updatedThreads","isThreadReply","parent_id","show_in_channel","_addToMessageList","parentID","thread","threadMessages","set","sort","reaction","i","length","_addReactionToMessage","idMatch","message_id","_removeReactionFromMessage","getClient","userID","user","update","old","concat","updateIn","type","filterReaction","filter","item","updated","messageToRemove","removed","flatMap","filteredMessages","now","Object","entries","lastEvent","since","received_at","dispatchEvent","cid","EVENT_MAP","isValidEventType","eventType","logChatPromiseExecution","promise","name","then","catch","error","console","warn","sleep","m","Promise","r","setTimeout","Channel","client","data","options","watch","state","presence","query","event","listeners","all","listener","Error","baseURL","validTypeRe","validIDRe","test","_client","_data","initialized","lastTypingEvent","isTyping","disconnected","configs","post","_channelURL","uri","contentType","sendFile","url","delete","_checkInitialized","messageID","user_id","keys","body","reactionType","channelData","updateMessage","accept_invite","reject_invite","add_members","add_moderators","invites","remove_members","demote_moderators","formData","form_data","getConfig","typing_events","diff","lastKeyStroke","sendEvent","min","max","messageSlice","slice","asMutable","lastMessage","read_events","resolve","stopTyping","clean","defaultOptions","wsPromise","_hasConnectionID","combined","_initializeState","logger","tags","response","get","last_read","lastRead","count","mentioned_users","findIndex","u","queryURL","activeChannels","_addChannelConfig","targetUserID","banUser","userId","unbanUser","callbackOrString","callbackOrNothing","key","valid","callback","value","s","addMessageSorted","member","addReaction","removeReaction","undefined","_isUsingServerAuth","updateUserReference","w","watcher","parsedRead","ClientState","users","userChannelReferences","updateUser","channelID","StableWSConnection","wsURL","clientID","messageCallback","recoverCallback","eventCallback","_setHealth","isHealthy","_reconnect","wsID","isResolved","resolvePromise","code","reason","rejectPromise","consecutiveFailures","totalFailures","_errorFromWSEvent","healthy","online","isWSFailure","window","addEventListener","onlineStatusChanged","removeEventListener","that","connectionOpen","reject","e","JSON","parse","stringify","isConnecting","healthCheckInterval","monitorInterval","_listenForConnectionChanges","_connect","healthCheck","_startMonitor","_startHealthCheck","healthCheckIntervalRef","clearInterval","monitorIntervalRef","_removeConnectionListeners","ws","removeAllListeners","isClosedPromise","close","onclose","_setupConnectionPromise","isoWS","onopen","bind","onerror","onmessage","connectionID","connection_id","interval","_retryInterval","_destroyCurrentWSConnection","open","Math","floor","random","setInterval","client_id","send","JWTUserToken","apiSecret","extraData","jwtOptions","TypeError","payload","opts","algorithm","noTimestamp","jwt","sign","JWTServerToken","server","decodeBase64","String","fromCharCode","L","c","x","l","A","charAt","UserFromToken","token","fragments","split","b64Payload","encodeBase64","btoa","Buffer","from","toString","DevToken","join","CheckSignature","secret","signature","hash","crypto","createHmac","digest","isReadableStream","obj","_read","_readableState","isFunction","prototype","call","Function","StreamChat","secretOrOptions","Boolean","_handleClientEvent","_handleChannelEvent","_callClientListeners","_callChannelListeners","messageEvent","jsonString","wsConnection","cids","lastMessageIDs","values","lastMessageId","queryChannels","$in","limit","recovery","last_message_ids","userToken","indexOf","browser","node","timeout","nodeOptions","httpAgent","http","Agent","keepAlive","httpsAgent","https","setBaseURL","process","env","STREAM_LOCAL_TEST_RUN","anonymous","wsBaseURL","replace","UUID","uuidv4","connect","_startCleaning","createToken","tokenUserId","_setUser","_setupConnection","_user","apn_config","p12_cert","patch","apnTemplate","apn_template","firebaseTemplate","firebase_template","firebaseDataTemplate","firebase_data_template","cleaningIntervalRef","connectionEstablishedCount","_disconnect","disconnect","anon","last_active","guestUser","setUser","access_token","exp","extra","unsubscribe","el","config","params","_logApiRequest","_addClientParams","axios","_logApiResponse","handleResponse","_logApiError","put","FormData","File","fileField","reverse","append","fetch","method","headers","Headers","Authorization","getAuthType","json","err","errorFromResponse","forEach","_updateUserReferences","me","refMap","refs","setIn","connecting","failures","user_details","user_token","server_determines_connection_id","qs","encodeURIComponent","_getToken","authType","_userAgent","recoverState","handleEvent","handshake","filterConditions","sortFields","k","v","field","direction","filter_conditions","updateUsers","channels","channelState","push_provider","channelType","custom","arguments","userObject","partialUpdateUsers","userMap","target_user_id","targetID","target_id","target_message_id","commands","clonedMessage","reservedMessageFields","hardDelete","hard","pkg","version","api_key","requestBody","xSignature"],"mappings":"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"}